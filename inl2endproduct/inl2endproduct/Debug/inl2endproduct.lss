
inl2endproduct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012e8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000812e8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004eb8  20070438  00081720  00010438  2**2
                  ALLOC
  3 .stack        00002000  200752f0  000865d8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c122  00000000  00000000  000104d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000237b  00000000  00000000  0001c5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000039b2  00000000  00000000  0001e96f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000938  00000000  00000000  00022321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000780  00000000  00000000  00022c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001723c  00000000  00000000  000233d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e252  00000000  00000000  0003a615  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ea88  00000000  00000000  00048867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011e0  00000000  00000000  000a72f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200772f0 	.word	0x200772f0
   80004:	00080ef9 	.word	0x00080ef9
   80008:	00080ef5 	.word	0x00080ef5
   8000c:	00080ef5 	.word	0x00080ef5
   80010:	00080ef5 	.word	0x00080ef5
   80014:	00080ef5 	.word	0x00080ef5
   80018:	00080ef5 	.word	0x00080ef5
	...
   8002c:	00080ef5 	.word	0x00080ef5
   80030:	00080ef5 	.word	0x00080ef5
   80034:	00000000 	.word	0x00000000
   80038:	00080ef5 	.word	0x00080ef5
   8003c:	00080ef5 	.word	0x00080ef5
   80040:	00080ef5 	.word	0x00080ef5
   80044:	00080ef5 	.word	0x00080ef5
   80048:	00080ef5 	.word	0x00080ef5
   8004c:	00080ef5 	.word	0x00080ef5
   80050:	00080ef5 	.word	0x00080ef5
   80054:	00080ef5 	.word	0x00080ef5
   80058:	00080ef5 	.word	0x00080ef5
   8005c:	00080ef5 	.word	0x00080ef5
   80060:	00080ef5 	.word	0x00080ef5
   80064:	00080ef5 	.word	0x00080ef5
   80068:	00000000 	.word	0x00000000
   8006c:	00080d65 	.word	0x00080d65
   80070:	00080d79 	.word	0x00080d79
   80074:	00080d8d 	.word	0x00080d8d
   80078:	00080da1 	.word	0x00080da1
	...
   80084:	00080ef5 	.word	0x00080ef5
   80088:	00080ef5 	.word	0x00080ef5
   8008c:	00080ef5 	.word	0x00080ef5
   80090:	00080ef5 	.word	0x00080ef5
   80094:	00080ef5 	.word	0x00080ef5
   80098:	00080ef5 	.word	0x00080ef5
   8009c:	00080ef5 	.word	0x00080ef5
   800a0:	00080ef5 	.word	0x00080ef5
   800a4:	00000000 	.word	0x00000000
   800a8:	00080ef5 	.word	0x00080ef5
   800ac:	0008030d 	.word	0x0008030d
   800b0:	00080ef5 	.word	0x00080ef5
   800b4:	00080ef5 	.word	0x00080ef5
   800b8:	000803d1 	.word	0x000803d1
   800bc:	00080ef5 	.word	0x00080ef5
   800c0:	00080ef5 	.word	0x00080ef5
   800c4:	00080ef5 	.word	0x00080ef5
   800c8:	00080ef5 	.word	0x00080ef5
   800cc:	00080ef5 	.word	0x00080ef5
   800d0:	00080ef5 	.word	0x00080ef5
   800d4:	00080ef5 	.word	0x00080ef5
   800d8:	00080ef5 	.word	0x00080ef5
   800dc:	00080ef5 	.word	0x00080ef5
   800e0:	00080ef5 	.word	0x00080ef5
   800e4:	00080ef5 	.word	0x00080ef5
   800e8:	00080ef5 	.word	0x00080ef5
   800ec:	00080ef5 	.word	0x00080ef5
   800f0:	00080ef5 	.word	0x00080ef5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	000812e8 	.word	0x000812e8
   80110:	000812eb 	.word	0x000812eb
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	000812e8 	.word	0x000812e8
   8013c:	000812e8 	.word	0x000812e8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070438 	.word	0x20070438
   80164:	00000000 	.word	0x00000000
   80168:	000812e8 	.word	0x000812e8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	000812e8 	.word	0x000812e8
   80198:	2007043c 	.word	0x2007043c
   8019c:	000812e8 	.word	0x000812e8
   801a0:	00000000 	.word	0x00000000

000801a4 <adc_setup>:
#include <asf.h>
#include "adcdac.h"


int adc_setup(void)
{
   801a4:	b538      	push	{r3, r4, r5, lr}
	if(pmc_enable_periph_clk(ID_ADC)==0)
   801a6:	2025      	movs	r0, #37	; 0x25
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <adc_setup+0x4c>)
   801aa:	4798      	blx	r3
   801ac:	b9f0      	cbnz	r0, 801ec <adc_setup+0x48>
	{
		adc_init(ADC, sysclk_get_main_hz(), ADC_CLOCK, 0);
   801ae:	4c11      	ldr	r4, [pc, #68]	; (801f4 <adc_setup+0x50>)
   801b0:	4620      	mov	r0, r4
   801b2:	4911      	ldr	r1, [pc, #68]	; (801f8 <adc_setup+0x54>)
   801b4:	4a11      	ldr	r2, [pc, #68]	; (801fc <adc_setup+0x58>)
   801b6:	2300      	movs	r3, #0
   801b8:	4d11      	ldr	r5, [pc, #68]	; (80200 <adc_setup+0x5c>)
   801ba:	47a8      	blx	r5
		adc_configure_timing(ADC, 0, 0, 0);
   801bc:	4620      	mov	r0, r4
   801be:	2100      	movs	r1, #0
   801c0:	460a      	mov	r2, r1
   801c2:	460b      	mov	r3, r1
   801c4:	4d0f      	ldr	r5, [pc, #60]	; (80204 <adc_setup+0x60>)
   801c6:	47a8      	blx	r5
		adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801c8:	4620      	mov	r0, r4
   801ca:	2100      	movs	r1, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <adc_setup+0x64>)
   801ce:	4798      	blx	r3
		adc_enable_channel(ADC, ADC_CHANNEL_7);
   801d0:	4620      	mov	r0, r4
   801d2:	2107      	movs	r1, #7
   801d4:	4d0d      	ldr	r5, [pc, #52]	; (8020c <adc_setup+0x68>)
   801d6:	47a8      	blx	r5
		adc_enable_channel(ADC, ADC_CHANNEL_10);
   801d8:	4620      	mov	r0, r4
   801da:	210a      	movs	r1, #10
   801dc:	47a8      	blx	r5
		adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   801de:	4620      	mov	r0, r4
   801e0:	2100      	movs	r1, #0
   801e2:	460a      	mov	r2, r1
   801e4:	4b0a      	ldr	r3, [pc, #40]	; (80210 <adc_setup+0x6c>)
   801e6:	4798      	blx	r3
		return 1;
   801e8:	2001      	movs	r0, #1
   801ea:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	return 0;
   801ec:	2000      	movs	r0, #0
}
   801ee:	bd38      	pop	{r3, r4, r5, pc}
   801f0:	00080e9d 	.word	0x00080e9d
   801f4:	400c0000 	.word	0x400c0000
   801f8:	0a037a00 	.word	0x0a037a00
   801fc:	01312d00 	.word	0x01312d00
   80200:	00080271 	.word	0x00080271
   80204:	000802c5 	.word	0x000802c5
   80208:	000802a5 	.word	0x000802a5
   8020c:	000802ed 	.word	0x000802ed
   80210:	000802b5 	.word	0x000802b5

00080214 <dac_setup>:


// added the DAC through ASF & also setup it

int dac_setup(void) {
   80214:	b538      	push	{r3, r4, r5, lr}
	/* Enable the specified peripheral clock (ADC clock).
	   If function returns 0, then we can proceed... */
	if (pmc_enable_periph_clk(ID_DACC) == 0) {
   80216:	2026      	movs	r0, #38	; 0x26
   80218:	4b0e      	ldr	r3, [pc, #56]	; (80254 <dac_setup+0x40>)
   8021a:	4798      	blx	r3
   8021c:	b9b8      	cbnz	r0, 8024e <dac_setup+0x3a>
		dacc_reset(DACC);
   8021e:	4c0e      	ldr	r4, [pc, #56]	; (80258 <dac_setup+0x44>)
   80220:	4620      	mov	r0, r4
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <dac_setup+0x48>)
   80224:	4798      	blx	r3
		dacc_set_transfer_mode(DACC, 0);
   80226:	4620      	mov	r0, r4
   80228:	2100      	movs	r1, #0
   8022a:	4b0d      	ldr	r3, [pc, #52]	; (80260 <dac_setup+0x4c>)
   8022c:	4798      	blx	r3
		dacc_set_timing(DACC, 1, 1, 0);
   8022e:	4620      	mov	r0, r4
   80230:	2101      	movs	r1, #1
   80232:	460a      	mov	r2, r1
   80234:	2300      	movs	r3, #0
   80236:	4d0b      	ldr	r5, [pc, #44]	; (80264 <dac_setup+0x50>)
   80238:	47a8      	blx	r5
		/* select and enable ADC channel - specified in 'adc.h' */
		dacc_set_channel_selection(DACC, DAC_CHANNEL);
   8023a:	4620      	mov	r0, r4
   8023c:	2100      	movs	r1, #0
   8023e:	4b0a      	ldr	r3, [pc, #40]	; (80268 <dac_setup+0x54>)
   80240:	4798      	blx	r3
		dacc_enable_channel(DACC, DAC_CHANNEL);
   80242:	4620      	mov	r0, r4
   80244:	2100      	movs	r1, #0
   80246:	4b09      	ldr	r3, [pc, #36]	; (8026c <dac_setup+0x58>)
   80248:	4798      	blx	r3
		/* indicate everything's OK! */
		return 1;
   8024a:	2001      	movs	r0, #1
   8024c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* indicate that something went wrong! */
	return 0;
   8024e:	2000      	movs	r0, #0
}
   80250:	bd38      	pop	{r3, r4, r5, pc}
   80252:	bf00      	nop
   80254:	00080e9d 	.word	0x00080e9d
   80258:	400c8000 	.word	0x400c8000
   8025c:	000805d5 	.word	0x000805d5
   80260:	000805dd 	.word	0x000805dd
   80264:	00080611 	.word	0x00080611
   80268:	000805f9 	.word	0x000805f9
   8026c:	00080641 	.word	0x00080641

00080270 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80270:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80272:	2401      	movs	r4, #1
   80274:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80276:	2400      	movs	r4, #0
   80278:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8027a:	f240 2502 	movw	r5, #514	; 0x202
   8027e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80282:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80286:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8028a:	6845      	ldr	r5, [r0, #4]
   8028c:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8028e:	0052      	lsls	r2, r2, #1
   80290:	fbb1 f1f2 	udiv	r1, r1, r2
   80294:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80296:	022d      	lsls	r5, r5, #8
   80298:	b2ad      	uxth	r5, r5
   8029a:	432b      	orrs	r3, r5
   8029c:	6043      	str	r3, [r0, #4]
	return 0;
}
   8029e:	4620      	mov	r0, r4
   802a0:	bc30      	pop	{r4, r5}
   802a2:	4770      	bx	lr

000802a4 <adc_set_resolution>:
 * \param resolution ADC resolution.
 *
 */
void adc_set_resolution(Adc *p_adc,const enum adc_resolution_t resolution)
{
	p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
   802a4:	6843      	ldr	r3, [r0, #4]
   802a6:	0109      	lsls	r1, r1, #4
   802a8:	f001 0110 	and.w	r1, r1, #16
   802ac:	430b      	orrs	r3, r1
   802ae:	6043      	str	r3, [r0, #4]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop

000802b4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802b4:	6843      	ldr	r3, [r0, #4]
   802b6:	4319      	orrs	r1, r3
   802b8:	01d2      	lsls	r2, r2, #7
   802ba:	b2d3      	uxtb	r3, r2
   802bc:	4319      	orrs	r1, r3
   802be:	6041      	str	r1, [r0, #4]
   802c0:	4770      	bx	lr
   802c2:	bf00      	nop

000802c4 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   802c4:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802c6:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   802c8:	4322      	orrs	r2, r4
   802ca:	0609      	lsls	r1, r1, #24
   802cc:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   802d0:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802d2:	071b      	lsls	r3, r3, #28
   802d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   802d8:	431a      	orrs	r2, r3
   802da:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   802dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   802e0:	4770      	bx	lr
   802e2:	bf00      	nop

000802e4 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   802e4:	2302      	movs	r3, #2
   802e6:	6003      	str	r3, [r0, #0]
   802e8:	4770      	bx	lr
   802ea:	bf00      	nop

000802ec <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   802ec:	2301      	movs	r3, #1
   802ee:	fa03 f101 	lsl.w	r1, r3, r1
   802f2:	6101      	str	r1, [r0, #16]
   802f4:	4770      	bx	lr
   802f6:	bf00      	nop

000802f8 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   802f8:	290f      	cmp	r1, #15
   802fa:	d803      	bhi.n	80304 <adc_get_channel_value+0xc>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   802fc:	3114      	adds	r1, #20
   802fe:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   80302:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   80304:	2000      	movs	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   80306:	4770      	bx	lr

00080308 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80308:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   8030a:	4770      	bx	lr

0008030c <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   8030c:	b570      	push	{r4, r5, r6, lr}
   8030e:	b082      	sub	sp, #8
	volatile uint32_t ul_dummy;
	uint32_t adc_in, outvalue;
	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
   80310:	4821      	ldr	r0, [pc, #132]	; (80398 <TC0_Handler+0x8c>)
   80312:	2100      	movs	r1, #0
   80314:	4b21      	ldr	r3, [pc, #132]	; (8039c <TC0_Handler+0x90>)
   80316:	4798      	blx	r3
   80318:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8031a:	9b01      	ldr	r3, [sp, #4]
	//starta ADC
	adc_start(ADC);
   8031c:	4820      	ldr	r0, [pc, #128]	; (803a0 <TC0_Handler+0x94>)
   8031e:	4b21      	ldr	r3, [pc, #132]	; (803a4 <TC0_Handler+0x98>)
   80320:	4798      	blx	r3
	//Wait until DRDY get high
	while((adc_get_status(ADC) & 0x01000000)==0);  
   80322:	4d1f      	ldr	r5, [pc, #124]	; (803a0 <TC0_Handler+0x94>)
   80324:	4c20      	ldr	r4, [pc, #128]	; (803a8 <TC0_Handler+0x9c>)
   80326:	4628      	mov	r0, r5
   80328:	47a0      	blx	r4
   8032a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8032e:	d0fa      	beq.n	80326 <TC0_Handler+0x1a>
	//input value
	adc_in=adc_get_channel_value(ADC, ADC_CHANNEL_10);		
   80330:	481b      	ldr	r0, [pc, #108]	; (803a0 <TC0_Handler+0x94>)
   80332:	210a      	movs	r1, #10
   80334:	4b1d      	ldr	r3, [pc, #116]	; (803ac <TC0_Handler+0xa0>)
   80336:	4798      	blx	r3
   80338:	4602      	mov	r2, r0
	//index in-buffer
	static uint32_t i=0;
	//to generate my level of delay

	
buffer[i] = (adc_in+((strength/10)*buffer[i])/100);
   8033a:	4b1d      	ldr	r3, [pc, #116]	; (803b0 <TC0_Handler+0xa4>)
   8033c:	681d      	ldr	r5, [r3, #0]
   8033e:	491d      	ldr	r1, [pc, #116]	; (803b4 <TC0_Handler+0xa8>)
   80340:	680b      	ldr	r3, [r1, #0]
   80342:	481d      	ldr	r0, [pc, #116]	; (803b8 <TC0_Handler+0xac>)
   80344:	4c1d      	ldr	r4, [pc, #116]	; (803bc <TC0_Handler+0xb0>)
   80346:	fb84 6405 	smull	r6, r4, r4, r5
   8034a:	17ed      	asrs	r5, r5, #31
   8034c:	ebc5 05a4 	rsb	r5, r5, r4, asr #2
   80350:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
   80354:	fb04 f405 	mul.w	r4, r4, r5
   80358:	4d19      	ldr	r5, [pc, #100]	; (803c0 <TC0_Handler+0xb4>)
   8035a:	fb85 6504 	smull	r6, r5, r5, r4
   8035e:	17e4      	asrs	r4, r4, #31
   80360:	ebc4 1465 	rsb	r4, r4, r5, asr #5
   80364:	4414      	add	r4, r2
   80366:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
	i++;
   8036a:	3301      	adds	r3, #1
   8036c:	600b      	str	r3, [r1, #0]
	
	
	if (i >= (delay_time*10))
   8036e:	4915      	ldr	r1, [pc, #84]	; (803c4 <TC0_Handler+0xb8>)
   80370:	6809      	ldr	r1, [r1, #0]
   80372:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80376:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   8037a:	d302      	bcc.n	80382 <TC0_Handler+0x76>
		i=0;
   8037c:	2100      	movs	r1, #0
   8037e:	4b0d      	ldr	r3, [pc, #52]	; (803b4 <TC0_Handler+0xa8>)
   80380:	6019      	str	r1, [r3, #0]
	outvalue = (adc_in + buffer[i]);
   80382:	4b0c      	ldr	r3, [pc, #48]	; (803b4 <TC0_Handler+0xa8>)
   80384:	6819      	ldr	r1, [r3, #0]
   80386:	4b0c      	ldr	r3, [pc, #48]	; (803b8 <TC0_Handler+0xac>)
   80388:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
	
	
	// from digital - analog. This is what I hear. It sends the outvalue to conversion
	dacc_write_conversion_data(DACC,outvalue);	
   8038c:	480e      	ldr	r0, [pc, #56]	; (803c8 <TC0_Handler+0xbc>)
   8038e:	4411      	add	r1, r2
   80390:	4b0e      	ldr	r3, [pc, #56]	; (803cc <TC0_Handler+0xc0>)
   80392:	4798      	blx	r3
	
}
   80394:	b002      	add	sp, #8
   80396:	bd70      	pop	{r4, r5, r6, pc}
   80398:	40080000 	.word	0x40080000
   8039c:	000806a1 	.word	0x000806a1
   803a0:	400c0000 	.word	0x400c0000
   803a4:	000802e5 	.word	0x000802e5
   803a8:	00080309 	.word	0x00080309
   803ac:	000802f9 	.word	0x000802f9
   803b0:	20075278 	.word	0x20075278
   803b4:	20070454 	.word	0x20070454
   803b8:	20070458 	.word	0x20070458
   803bc:	66666667 	.word	0x66666667
   803c0:	51eb851f 	.word	0x51eb851f
   803c4:	2007527c 	.word	0x2007527c
   803c8:	400c8000 	.word	0x400c8000
   803cc:	000805f5 	.word	0x000805f5

000803d0 <TC3_Handler>:
void TC3_Handler(void)
{
   803d0:	b530      	push	{r4, r5, lr}
   803d2:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC1, 0);
   803d4:	482a      	ldr	r0, [pc, #168]	; (80480 <TC3_Handler+0xb0>)
   803d6:	2100      	movs	r1, #0
   803d8:	4b2a      	ldr	r3, [pc, #168]	; (80484 <TC3_Handler+0xb4>)
   803da:	4798      	blx	r3
   803dc:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   803de:	9b01      	ldr	r3, [sp, #4]
	
	adc_start(ADC);
   803e0:	4829      	ldr	r0, [pc, #164]	; (80488 <TC3_Handler+0xb8>)
   803e2:	4b2a      	ldr	r3, [pc, #168]	; (8048c <TC3_Handler+0xbc>)
   803e4:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x01000000)==0);  //Wait until DRDY get high
   803e6:	4d28      	ldr	r5, [pc, #160]	; (80488 <TC3_Handler+0xb8>)
   803e8:	4c29      	ldr	r4, [pc, #164]	; (80490 <TC3_Handler+0xc0>)
   803ea:	4628      	mov	r0, r5
   803ec:	47a0      	blx	r4
   803ee:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   803f2:	d0fa      	beq.n	803ea <TC3_Handler+0x1a>
	
	// result implies the voltage level so we can identify which button is pressed (see LCDShield.c)
	uint32_t result = adc_get_channel_value(ADC, ADC_CHANNEL_7);
   803f4:	4824      	ldr	r0, [pc, #144]	; (80488 <TC3_Handler+0xb8>)
   803f6:	2107      	movs	r1, #7
   803f8:	4b26      	ldr	r3, [pc, #152]	; (80494 <TC3_Handler+0xc4>)
   803fa:	4798      	blx	r3



// to check buttons and trigger input	
	// for right button
	if (result < 50 ) 	{
   803fc:	2831      	cmp	r0, #49	; 0x31
   803fe:	d80e      	bhi.n	8041e <TC3_Handler+0x4e>
		//set to max 300 according to instructions delay time = 300
		if (delay_time >= 300 )
   80400:	4b25      	ldr	r3, [pc, #148]	; (80498 <TC3_Handler+0xc8>)
   80402:	681b      	ldr	r3, [r3, #0]
   80404:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   80408:	d304      	bcc.n	80414 <TC3_Handler+0x44>
		{
			delay_time = 300;
   8040a:	f44f 7296 	mov.w	r2, #300	; 0x12c
   8040e:	4b22      	ldr	r3, [pc, #136]	; (80498 <TC3_Handler+0xc8>)
   80410:	601a      	str	r2, [r3, #0]
   80412:	e033      	b.n	8047c <TC3_Handler+0xac>
		}
		else
		{
			// buttons are increasing/decreasing value by 5
			delay_time += 5;
   80414:	4b20      	ldr	r3, [pc, #128]	; (80498 <TC3_Handler+0xc8>)
   80416:	681a      	ldr	r2, [r3, #0]
   80418:	3205      	adds	r2, #5
   8041a:	601a      	str	r2, [r3, #0]
   8041c:	e02e      	b.n	8047c <TC3_Handler+0xac>
		}
		
	}
	// for up button
	else if (result < 700 ) 
   8041e:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   80422:	d20c      	bcs.n	8043e <TC3_Handler+0x6e>
		{
		if (strength == 100)
   80424:	4b1d      	ldr	r3, [pc, #116]	; (8049c <TC3_Handler+0xcc>)
   80426:	681b      	ldr	r3, [r3, #0]
   80428:	2b64      	cmp	r3, #100	; 0x64
   8042a:	d103      	bne.n	80434 <TC3_Handler+0x64>
		{
			strength = 100;
   8042c:	2264      	movs	r2, #100	; 0x64
   8042e:	4b1b      	ldr	r3, [pc, #108]	; (8049c <TC3_Handler+0xcc>)
   80430:	601a      	str	r2, [r3, #0]
   80432:	e023      	b.n	8047c <TC3_Handler+0xac>
			
		}
		else
		{
			// buttons are increasing/decreasing value by 5
			strength +=5;
   80434:	4b19      	ldr	r3, [pc, #100]	; (8049c <TC3_Handler+0xcc>)
   80436:	681a      	ldr	r2, [r3, #0]
   80438:	3205      	adds	r2, #5
   8043a:	601a      	str	r2, [r3, #0]
   8043c:	e01e      	b.n	8047c <TC3_Handler+0xac>
		}
		
	}
	// for down button
	else if (result < 1500 ) 
   8043e:	f240 53db 	movw	r3, #1499	; 0x5db
   80442:	4298      	cmp	r0, r3
   80444:	d80b      	bhi.n	8045e <TC3_Handler+0x8e>
	{
		if (strength == 0)
   80446:	4b15      	ldr	r3, [pc, #84]	; (8049c <TC3_Handler+0xcc>)
   80448:	681b      	ldr	r3, [r3, #0]
   8044a:	b91b      	cbnz	r3, 80454 <TC3_Handler+0x84>
		{
			strength = 0;
   8044c:	2200      	movs	r2, #0
   8044e:	4b13      	ldr	r3, [pc, #76]	; (8049c <TC3_Handler+0xcc>)
   80450:	601a      	str	r2, [r3, #0]
   80452:	e013      	b.n	8047c <TC3_Handler+0xac>
		}
		else
		{
			// buttons are increasing/decreasing value by 5
			strength -=5;
   80454:	4b11      	ldr	r3, [pc, #68]	; (8049c <TC3_Handler+0xcc>)
   80456:	681a      	ldr	r2, [r3, #0]
   80458:	3a05      	subs	r2, #5
   8045a:	601a      	str	r2, [r3, #0]
   8045c:	e00e      	b.n	8047c <TC3_Handler+0xac>
		}
		
	}
	// for left button
	else if (result < 1900 )
   8045e:	f240 736b 	movw	r3, #1899	; 0x76b
   80462:	4298      	cmp	r0, r3
   80464:	d80a      	bhi.n	8047c <TC3_Handler+0xac>
	{
		if (delay_time == 0 )
   80466:	4b0c      	ldr	r3, [pc, #48]	; (80498 <TC3_Handler+0xc8>)
   80468:	681b      	ldr	r3, [r3, #0]
   8046a:	b91b      	cbnz	r3, 80474 <TC3_Handler+0xa4>
		{
			delay_time = 0;
   8046c:	2200      	movs	r2, #0
   8046e:	4b0a      	ldr	r3, [pc, #40]	; (80498 <TC3_Handler+0xc8>)
   80470:	601a      	str	r2, [r3, #0]
   80472:	e003      	b.n	8047c <TC3_Handler+0xac>
		}
		else
		{
			// buttons are increasing/decreasing value by 5
			delay_time -= 5;
   80474:	4b08      	ldr	r3, [pc, #32]	; (80498 <TC3_Handler+0xc8>)
   80476:	681a      	ldr	r2, [r3, #0]
   80478:	3a05      	subs	r2, #5
   8047a:	601a      	str	r2, [r3, #0]
		}
	}
   8047c:	b003      	add	sp, #12
   8047e:	bd30      	pop	{r4, r5, pc}
   80480:	40084000 	.word	0x40084000
   80484:	000806a1 	.word	0x000806a1
   80488:	400c0000 	.word	0x400c0000
   8048c:	000802e5 	.word	0x000802e5
   80490:	00080309 	.word	0x00080309
   80494:	000802f9 	.word	0x000802f9
   80498:	2007527c 	.word	0x2007527c
   8049c:	20075278 	.word	0x20075278

000804a0 <configure_tc_audio>:

#include <asf.h>
#include "conf_tc.h"

void configure_tc_audio(void)
{
   804a0:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   804a2:	201b      	movs	r0, #27
   804a4:	4b0e      	ldr	r3, [pc, #56]	; (804e0 <configure_tc_audio+0x40>)
   804a6:	4798      	blx	r3

	/** Configure TC for a 10 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   804a8:	4c0e      	ldr	r4, [pc, #56]	; (804e4 <configure_tc_audio+0x44>)
   804aa:	4620      	mov	r0, r4
   804ac:	2100      	movs	r1, #0
   804ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   804b2:	4b0d      	ldr	r3, [pc, #52]	; (804e8 <configure_tc_audio+0x48>)
   804b4:	4798      	blx	r3
	tc_write_rc(TC0, 0, 4200);					//4200 corresponds to fs = 10 kHz
   804b6:	4620      	mov	r0, r4
   804b8:	2100      	movs	r1, #0
   804ba:	f241 0268 	movw	r2, #4200	; 0x1068
   804be:	4b0b      	ldr	r3, [pc, #44]	; (804ec <configure_tc_audio+0x4c>)
   804c0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   804c6:	4b0a      	ldr	r3, [pc, #40]	; (804f0 <configure_tc_audio+0x50>)
   804c8:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   804ca:	4620      	mov	r0, r4
   804cc:	2100      	movs	r1, #0
   804ce:	2210      	movs	r2, #16
   804d0:	4b08      	ldr	r3, [pc, #32]	; (804f4 <configure_tc_audio+0x54>)
   804d2:	4798      	blx	r3

	tc_start(TC0, 0);
   804d4:	4620      	mov	r0, r4
   804d6:	2100      	movs	r1, #0
   804d8:	4b07      	ldr	r3, [pc, #28]	; (804f8 <configure_tc_audio+0x58>)
   804da:	4798      	blx	r3
   804dc:	bd10      	pop	{r4, pc}
   804de:	bf00      	nop
   804e0:	00080e9d 	.word	0x00080e9d
   804e4:	40080000 	.word	0x40080000
   804e8:	00080655 	.word	0x00080655
   804ec:	00080691 	.word	0x00080691
   804f0:	e000e100 	.word	0xe000e100
   804f4:	00080699 	.word	0x00080699
   804f8:	00080679 	.word	0x00080679

000804fc <configure_tc_buttons>:

}


void configure_tc_buttons(void)
{
   804fc:	b510      	push	{r4, lr}
	/* Configure interrupts for shield buttons */
	/*----------------------------------------------------------------*/	

	/* Configure power management of timer clock 1 */
	pmc_enable_periph_clk(ID_TC3); // ID_TC3 for clock TC1
   804fe:	201e      	movs	r0, #30
   80500:	4b0d      	ldr	r3, [pc, #52]	; (80538 <configure_tc_buttons+0x3c>)
   80502:	4798      	blx	r3
	/** Configure TC for a 5Hz frequency and trigger on
	RC compare. */


	/** Configure TC for a 5Hz frequency and trigger on RC compare. */
	tc_init(TC1, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   80504:	4c0d      	ldr	r4, [pc, #52]	; (8053c <configure_tc_buttons+0x40>)
   80506:	4620      	mov	r0, r4
   80508:	2100      	movs	r1, #0
   8050a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8050e:	4b0c      	ldr	r3, [pc, #48]	; (80540 <configure_tc_buttons+0x44>)
   80510:	4798      	blx	r3
	tc_write_rc(TC1, 0, 8400000);					//8400000 motsvarar sampling av knappar 5 ggr i sek
   80512:	4620      	mov	r0, r4
   80514:	2100      	movs	r1, #0
   80516:	4a0b      	ldr	r2, [pc, #44]	; (80544 <configure_tc_buttons+0x48>)
   80518:	4b0b      	ldr	r3, [pc, #44]	; (80548 <configure_tc_buttons+0x4c>)
   8051a:	4798      	blx	r3
   8051c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   80520:	4b0a      	ldr	r3, [pc, #40]	; (8054c <configure_tc_buttons+0x50>)
   80522:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC3);
	tc_enable_interrupt(TC1, 0, TC_IER_CPCS);
   80524:	4620      	mov	r0, r4
   80526:	2100      	movs	r1, #0
   80528:	2210      	movs	r2, #16
   8052a:	4b09      	ldr	r3, [pc, #36]	; (80550 <configure_tc_buttons+0x54>)
   8052c:	4798      	blx	r3
	tc_start(TC1, 0);
   8052e:	4620      	mov	r0, r4
   80530:	2100      	movs	r1, #0
   80532:	4b08      	ldr	r3, [pc, #32]	; (80554 <configure_tc_buttons+0x58>)
   80534:	4798      	blx	r3
   80536:	bd10      	pop	{r4, pc}
   80538:	00080e9d 	.word	0x00080e9d
   8053c:	40084000 	.word	0x40084000
   80540:	00080655 	.word	0x00080655
   80544:	00802c80 	.word	0x00802c80
   80548:	00080691 	.word	0x00080691
   8054c:	e000e100 	.word	0xe000e100
   80550:	00080699 	.word	0x00080699
   80554:	00080679 	.word	0x00080679

00080558 <delay_init>:

#include "my_delay.h"


void delay_init(void)
{
   80558:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC6);
   8055a:	2021      	movs	r0, #33	; 0x21
   8055c:	4b08      	ldr	r3, [pc, #32]	; (80580 <delay_init+0x28>)
   8055e:	4798      	blx	r3
	tc_init(TC1,0,0); /*ID_TC3, TC1, channel 0, TCLK3 och capturemode */
   80560:	4808      	ldr	r0, [pc, #32]	; (80584 <delay_init+0x2c>)
   80562:	2100      	movs	r1, #0
   80564:	460a      	mov	r2, r1
   80566:	4b08      	ldr	r3, [pc, #32]	; (80588 <delay_init+0x30>)
   80568:	4798      	blx	r3
	tc_set_block_mode(TC2,0);
   8056a:	4c08      	ldr	r4, [pc, #32]	; (8058c <delay_init+0x34>)
   8056c:	4620      	mov	r0, r4
   8056e:	2100      	movs	r1, #0
   80570:	4b07      	ldr	r3, [pc, #28]	; (80590 <delay_init+0x38>)
   80572:	4798      	blx	r3
	tc_stop(TC2,0);                /* Making sure the timer is not running */              
   80574:	4620      	mov	r0, r4
   80576:	2100      	movs	r1, #0
   80578:	4b06      	ldr	r3, [pc, #24]	; (80594 <delay_init+0x3c>)
   8057a:	4798      	blx	r3
   8057c:	bd10      	pop	{r4, pc}
   8057e:	bf00      	nop
   80580:	00080e9d 	.word	0x00080e9d
   80584:	40084000 	.word	0x40084000
   80588:	00080655 	.word	0x00080655
   8058c:	40088000 	.word	0x40088000
   80590:	00080671 	.word	0x00080671
   80594:	00080681 	.word	0x00080681

00080598 <delay>:
}

/* delay */
void delay(uint32_t us)
/* A Delay of us microseconds */
{
   80598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8059a:	4604      	mov	r4, r0
 	tc_start(TC2,0);
   8059c:	4809      	ldr	r0, [pc, #36]	; (805c4 <delay+0x2c>)
   8059e:	2100      	movs	r1, #0
   805a0:	4b09      	ldr	r3, [pc, #36]	; (805c8 <delay+0x30>)
   805a2:	4798      	blx	r3
 	while (tc_read_cv(TC2,0) < us*42);        /* TIMER_CLOCK1 runs on MCK/2 */
   805a4:	272a      	movs	r7, #42	; 0x2a
   805a6:	fb07 f704 	mul.w	r7, r7, r4
   805aa:	4e06      	ldr	r6, [pc, #24]	; (805c4 <delay+0x2c>)
   805ac:	2500      	movs	r5, #0
   805ae:	4c07      	ldr	r4, [pc, #28]	; (805cc <delay+0x34>)
   805b0:	4630      	mov	r0, r6
   805b2:	4629      	mov	r1, r5
   805b4:	47a0      	blx	r4
   805b6:	42b8      	cmp	r0, r7
   805b8:	d3fa      	bcc.n	805b0 <delay+0x18>
 	tc_stop(TC2,0);
   805ba:	4802      	ldr	r0, [pc, #8]	; (805c4 <delay+0x2c>)
   805bc:	2100      	movs	r1, #0
   805be:	4b04      	ldr	r3, [pc, #16]	; (805d0 <delay+0x38>)
   805c0:	4798      	blx	r3
   805c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   805c4:	40088000 	.word	0x40088000
   805c8:	00080679 	.word	0x00080679
   805cc:	00080689 	.word	0x00080689
   805d0:	00080681 	.word	0x00080681

000805d4 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   805d4:	2301      	movs	r3, #1
   805d6:	6003      	str	r3, [r0, #0]
   805d8:	4770      	bx	lr
   805da:	bf00      	nop

000805dc <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   805dc:	b121      	cbz	r1, 805e8 <dacc_set_transfer_mode+0xc>
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR |= DACC_MR_WORD;
#else
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   805de:	6843      	ldr	r3, [r0, #4]
   805e0:	f043 0310 	orr.w	r3, r3, #16
   805e4:	6043      	str	r3, [r0, #4]
   805e6:	e003      	b.n	805f0 <dacc_set_transfer_mode+0x14>
#endif
	} else {
#if (SAM3N) || (SAM4L) || (SAM4N)
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   805e8:	6843      	ldr	r3, [r0, #4]
   805ea:	f023 0310 	bic.w	r3, r3, #16
   805ee:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   805f0:	2000      	movs	r0, #0
   805f2:	4770      	bx	lr

000805f4 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   805f4:	6201      	str	r1, [r0, #32]
   805f6:	4770      	bx	lr

000805f8 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   805f8:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   805fa:	2901      	cmp	r1, #1
   805fc:	d806      	bhi.n	8060c <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
   805fe:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   80602:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   80606:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   80608:	2000      	movs	r0, #0
   8060a:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
   8060c:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
   8060e:	4770      	bx	lr

00080610 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   80610:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   80612:	6844      	ldr	r4, [r0, #4]
   80614:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   80618:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   8061c:	0209      	lsls	r1, r1, #8
   8061e:	b289      	uxth	r1, r1
   80620:	430c      	orrs	r4, r1
	if (ul_maxs) {
   80622:	b112      	cbz	r2, 8062a <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
   80624:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
   80628:	e001      	b.n	8062e <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
   8062a:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   8062e:	061b      	lsls	r3, r3, #24
   80630:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   80634:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
   80636:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
   80638:	2000      	movs	r0, #0
   8063a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8063e:	4770      	bx	lr

00080640 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   80640:	2901      	cmp	r1, #1
   80642:	d805      	bhi.n	80650 <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   80644:	2301      	movs	r3, #1
   80646:	fa03 f101 	lsl.w	r1, r3, r1
   8064a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   8064c:	2000      	movs	r0, #0
   8064e:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
   80650:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   80652:	4770      	bx	lr

00080654 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   80654:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80656:	0189      	lsls	r1, r1, #6
   80658:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8065a:	2402      	movs	r4, #2
   8065c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8065e:	f04f 31ff 	mov.w	r1, #4294967295
   80662:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80664:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80666:	605a      	str	r2, [r3, #4]
}
   80668:	f85d 4b04 	ldr.w	r4, [sp], #4
   8066c:	4770      	bx	lr
   8066e:	bf00      	nop

00080670 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   80670:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80674:	4770      	bx	lr
   80676:	bf00      	nop

00080678 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80678:	0189      	lsls	r1, r1, #6
   8067a:	2305      	movs	r3, #5
   8067c:	5043      	str	r3, [r0, r1]
   8067e:	4770      	bx	lr

00080680 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80680:	0189      	lsls	r1, r1, #6
   80682:	2302      	movs	r3, #2
   80684:	5043      	str	r3, [r0, r1]
   80686:	4770      	bx	lr

00080688 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80688:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8068c:	6908      	ldr	r0, [r1, #16]
}
   8068e:	4770      	bx	lr

00080690 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80690:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80694:	61ca      	str	r2, [r1, #28]
   80696:	4770      	bx	lr

00080698 <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80698:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8069c:	624a      	str	r2, [r1, #36]	; 0x24
   8069e:	4770      	bx	lr

000806a0 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806a0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   806a4:	6a08      	ldr	r0, [r1, #32]
}
   806a6:	4770      	bx	lr

000806a8 <lcd_write>:
 *        type = 0 controls the display
 *        type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 *
 *        LCDwrite returns the actual pinout value on PIOC 26-23, which is the reverse order compared to the Due pin order of D4-D7
 */
{
   806a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806ac:	b084      	sub	sp, #16
   806ae:	4607      	mov	r7, r0
   806b0:	460d      	mov	r5, r1
        /* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
        uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   806b2:	4b22      	ldr	r3, [pc, #136]	; (8073c <lcd_write+0x94>)
   806b4:	466c      	mov	r4, sp
   806b6:	6818      	ldr	r0, [r3, #0]
   806b8:	6859      	ldr	r1, [r3, #4]
   806ba:	689a      	ldr	r2, [r3, #8]
   806bc:	68db      	ldr	r3, [r3, #12]
   806be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        byte_orig = byte;


        /* write the first 4 bits to the shield. */
        byte = byte>>4;
        byte = mirror_pin[byte];
   806c0:	eb04 1317 	add.w	r3, r4, r7, lsr #4
   806c4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        byte32 = (uint32_t)byte << 23;
   806c8:	05d3      	lsls	r3, r2, #23
        mirrored_output = byte<<4;
   806ca:	0112      	lsls	r2, r2, #4
   806cc:	fa5f f882 	uxtb.w	r8, r2
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   806d0:	b125      	cbz	r5, 806dc <lcd_write+0x34>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   806d6:	4a1a      	ldr	r2, [pc, #104]	; (80740 <lcd_write+0x98>)
   806d8:	6311      	str	r1, [r2, #48]	; 0x30
   806da:	e003      	b.n	806e4 <lcd_write+0x3c>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   806e0:	4a17      	ldr	r2, [pc, #92]	; (80740 <lcd_write+0x98>)
   806e2:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   806e4:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   806e8:	4c15      	ldr	r4, [pc, #84]	; (80740 <lcd_write+0x98>)
   806ea:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   806ec:	43db      	mvns	r3, r3
   806ee:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   806f2:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   806f8:	6326      	str	r6, [r4, #48]	; 0x30
        
        ioport_set_pin_level(LCD_RS, type); 
        ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);
   806fa:	2001      	movs	r0, #1
   806fc:	4d11      	ldr	r5, [pc, #68]	; (80744 <lcd_write+0x9c>)
   806fe:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80700:	6366      	str	r6, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);
        
        delay(100);
   80702:	2064      	movs	r0, #100	; 0x64
   80704:	47a8      	blx	r5
        
        /* write the second 4 bits to the shield. */
        byte = byte_orig;
        byte = byte & 0x0f;
        byte = mirror_pin[byte];
   80706:	f007 070f 	and.w	r7, r7, #15
   8070a:	ab04      	add	r3, sp, #16
   8070c:	441f      	add	r7, r3
   8070e:	f817 2c10 	ldrb.w	r2, [r7, #-16]
        byte32 = (uint32_t)byte<<23;
   80712:	05d3      	lsls	r3, r2, #23
        mirrored_output = mirrored_output + byte;
   80714:	4442      	add	r2, r8
   80716:	b2d7      	uxtb	r7, r2
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80718:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   8071c:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   8071e:	43db      	mvns	r3, r3
   80720:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80724:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80726:	6326      	str	r6, [r4, #48]	; 0x30


        ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);
   80728:	2001      	movs	r0, #1
   8072a:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8072c:	6366      	str	r6, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);
		delay(100);
   8072e:	2064      	movs	r0, #100	; 0x64
   80730:	47a8      	blx	r5
        
        return mirrored_output;
}
   80732:	4638      	mov	r0, r7
   80734:	b004      	add	sp, #16
   80736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8073a:	bf00      	nop
   8073c:	0008127c 	.word	0x0008127c
   80740:	400e1200 	.word	0x400e1200
   80744:	00080599 	.word	0x00080599

00080748 <LCDInit>:
#include "asf.h"
#include "LCDShield.h"
#include "my_delay.h"

int LCDInit(void)      /* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   80748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8074c:	4c34      	ldr	r4, [pc, #208]	; (80820 <LCDInit+0xd8>)
   8074e:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80752:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80754:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80758:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   8075c:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8075e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   80762:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   80766:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   80768:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8076c:	6365      	str	r5, [r4, #52]	; 0x34
        ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
        ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
        
        ioport_set_pin_level(LCD_Enable, LOW);
        
        delay(30000);                /* wait > 15 ms */
   8076e:	f247 5030 	movw	r0, #30000	; 0x7530
   80772:	4e2c      	ldr	r6, [pc, #176]	; (80824 <LCDInit+0xdc>)
   80774:	47b0      	blx	r6
   80776:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80778:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   8077c:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80780:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80784:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80788:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   8078c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80790:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80794:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80796:	6325      	str	r5, [r4, #48]	; 0x30
        ioport_set_pin_level(LCD_D4, HIGH);
        ioport_set_pin_level(LCD_D5, HIGH);
        ioport_set_pin_level(LCD_D6, LOW);
        ioport_set_pin_level(LCD_D7, LOW);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);                /* delay 1 us */
   80798:	2001      	movs	r0, #1
   8079a:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8079c:	6365      	str	r5, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);
        
        delay(4100);        /* wait for more than 4,1 ms */
   8079e:	f241 0004 	movw	r0, #4100	; 0x1004
   807a2:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807a4:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   807a8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807ac:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   807b0:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807b2:	6325      	str	r5, [r4, #48]	; 0x30
        ioport_set_pin_level(LCD_D4, HIGH);
        ioport_set_pin_level(LCD_D5, HIGH);
        ioport_set_pin_level(LCD_D6, LOW);
        ioport_set_pin_level(LCD_D7, LOW);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);                /* delay 1 us */
   807b4:	2001      	movs	r0, #1
   807b6:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807b8:	6365      	str	r5, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);


        delay(100);        /* wait 100 us */
   807ba:	2064      	movs	r0, #100	; 0x64
   807bc:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807be:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   807c2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807c6:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   807ca:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807cc:	6325      	str	r5, [r4, #48]	; 0x30
        ioport_set_pin_level(LCD_D4, HIGH);
        ioport_set_pin_level(LCD_D5, HIGH);
        ioport_set_pin_level(LCD_D6, LOW);
        ioport_set_pin_level(LCD_D7, LOW);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);                /* delay 1 us */
   807ce:	2001      	movs	r0, #1
   807d0:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807d2:	6365      	str	r5, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);                
        
        delay(100);        /* wait 100 us */
   807d4:	2064      	movs	r0, #100	; 0x64
   807d6:	47b0      	blx	r6
   807d8:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807dc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807e0:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   807e4:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   807e6:	6325      	str	r5, [r4, #48]	; 0x30
        ioport_set_pin_level(LCD_D4, LOW);
        ioport_set_pin_level(LCD_D5, HIGH);
        ioport_set_pin_level(LCD_D6, LOW);
        ioport_set_pin_level(LCD_D7, LOW);
        ioport_set_pin_level(LCD_Enable, HIGH);
        delay(1);
   807e8:	2001      	movs	r0, #1
   807ea:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   807ec:	6365      	str	r5, [r4, #52]	; 0x34
        ioport_set_pin_level(LCD_Enable, LOW);
        
        delay(100);
   807ee:	2064      	movs	r0, #100	; 0x64
   807f0:	47b0      	blx	r6


        lcd_write(0b00101000, LOW);                /* Two rows, small font */
   807f2:	2028      	movs	r0, #40	; 0x28
   807f4:	2100      	movs	r1, #0
   807f6:	4c0c      	ldr	r4, [pc, #48]	; (80828 <LCDInit+0xe0>)
   807f8:	47a0      	blx	r4
        lcd_write(0b00001000, LOW);                /* Display off */
   807fa:	2008      	movs	r0, #8
   807fc:	2100      	movs	r1, #0
   807fe:	47a0      	blx	r4
        lcd_write(0b00000001, LOW);                /* Display clear */
   80800:	2001      	movs	r0, #1
   80802:	2100      	movs	r1, #0
   80804:	47a0      	blx	r4
        
        delay(3000);
   80806:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8080a:	47b0      	blx	r6
        
        lcd_write(0b00000110, LOW);                /* Entry mode set: move cursor right, no display shift */
   8080c:	2006      	movs	r0, #6
   8080e:	2100      	movs	r1, #0
   80810:	47a0      	blx	r4
        lcd_write(0b00001111 ,LOW);                /* Display on, cursor on, blinking on */
   80812:	200f      	movs	r0, #15
   80814:	2100      	movs	r1, #0
   80816:	47a0      	blx	r4


        all_ok = 1;                                        /* simple return statement showing that the initialization of the LCD has completed */
        return all_ok;
}
   80818:	2001      	movs	r0, #1
   8081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8081e:	bf00      	nop
   80820:	400e1200 	.word	0x400e1200
   80824:	00080599 	.word	0x00080599
   80828:	000806a9 	.word	0x000806a9

0008082c <LCD_Clear_Display>:
}


// clears display and sets cursor to starting position
int LCD_Clear_Display(void)
{        
   8082c:	b538      	push	{r3, r4, r5, lr}
        int all_ok=0;
        lcd_write(0b00000001, LOW);
   8082e:	2001      	movs	r0, #1
   80830:	2100      	movs	r1, #0
   80832:	4d07      	ldr	r5, [pc, #28]	; (80850 <LCD_Clear_Display+0x24>)
   80834:	47a8      	blx	r5
        delay(3000);
   80836:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8083a:	4c06      	ldr	r4, [pc, #24]	; (80854 <LCD_Clear_Display+0x28>)
   8083c:	47a0      	blx	r4
        lcd_write(0b00000010, LOW); 
   8083e:	2002      	movs	r0, #2
   80840:	2100      	movs	r1, #0
   80842:	47a8      	blx	r5
        delay(3000);
   80844:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80848:	47a0      	blx	r4
        all_ok = 1;
        return all_ok;
}
   8084a:	2001      	movs	r0, #1
   8084c:	bd38      	pop	{r3, r4, r5, pc}
   8084e:	bf00      	nop
   80850:	000806a9 	.word	0x000806a9
   80854:	00080599 	.word	0x00080599

00080858 <lcd_put_cursor>:
// By pointing to the correct address on the DDRAM of the LCD we can put cursor at
// the column and row that we intend
int lcd_put_cursor(uint8_t row, uint8_t col)
{
   80858:	b508      	push	{r3, lr}
	lcd_write((128 | (row << 6) | col), LOW);
   8085a:	f061 017f 	orn	r1, r1, #127	; 0x7f
   8085e:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
   80862:	b2c0      	uxtb	r0, r0
   80864:	2100      	movs	r1, #0
   80866:	4b03      	ldr	r3, [pc, #12]	; (80874 <lcd_put_cursor+0x1c>)
   80868:	4798      	blx	r3
	delay(40);	/* delay of 40 microseconds is necessary */
   8086a:	2028      	movs	r0, #40	; 0x28
   8086c:	4b02      	ldr	r3, [pc, #8]	; (80878 <lcd_put_cursor+0x20>)
   8086e:	4798      	blx	r3
	return 1;
}
   80870:	2001      	movs	r0, #1
   80872:	bd08      	pop	{r3, pc}
   80874:	000806a9 	.word	0x000806a9
   80878:	00080599 	.word	0x00080599

0008087c <dispRES>:


// function to display the result on the LCD
int  dispRES(int32_t result)
{
   8087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80880:	af00      	add	r7, sp, #0
        int pos = 0, nbr_elem = 0;
        int32_t nbr_elem_copy;        
        int all_ok=0;        
        
        // mostly taken from lab1d
        if (result<0)
   80882:	1e05      	subs	r5, r0, #0
   80884:	da06      	bge.n	80894 <dispRES+0x18>
        {
                lcd_write('-', HIGH);
   80886:	202d      	movs	r0, #45	; 0x2d
   80888:	2101      	movs	r1, #1
   8088a:	4b24      	ldr	r3, [pc, #144]	; (8091c <dispRES+0xa0>)
   8088c:	4798      	blx	r3
                result = -result;
   8088e:	426d      	negs	r5, r5
        }
        
        nbr_elem_copy = result;        


        while (nbr_elem_copy)
   80890:	b90d      	cbnz	r5, 80896 <dispRES+0x1a>
   80892:	e03f      	b.n	80914 <dispRES+0x98>
        {
                lcd_write('-', HIGH);
                result = -result;
        }
        
        else if(result == 0)
   80894:	b11d      	cbz	r5, 8089e <dispRES+0x22>
}


// function to display the result on the LCD
int  dispRES(int32_t result)
{
   80896:	462b      	mov	r3, r5
   80898:	2100      	movs	r1, #0
        nbr_elem_copy = result;        


        while (nbr_elem_copy)
        {
                nbr_elem_copy /= 10;
   8089a:	4821      	ldr	r0, [pc, #132]	; (80920 <dispRES+0xa4>)
   8089c:	e004      	b.n	808a8 <dispRES+0x2c>
                result = -result;
        }
        
        else if(result == 0)
        {
                lcd_write('0', HIGH);
   8089e:	2030      	movs	r0, #48	; 0x30
   808a0:	2101      	movs	r1, #1
   808a2:	4b1e      	ldr	r3, [pc, #120]	; (8091c <dispRES+0xa0>)
   808a4:	4798      	blx	r3
   808a6:	e035      	b.n	80914 <dispRES+0x98>
        nbr_elem_copy = result;        


        while (nbr_elem_copy)
        {
                nbr_elem_copy /= 10;
   808a8:	fb80 4203 	smull	r4, r2, r0, r3
   808ac:	17db      	asrs	r3, r3, #31
                nbr_elem++;
   808ae:	3101      	adds	r1, #1
        }
        
        nbr_elem_copy = result;        


        while (nbr_elem_copy)
   808b0:	ebd3 03a2 	rsbs	r3, r3, r2, asr #2
   808b4:	d1f8      	bne.n	808a8 <dispRES+0x2c>
   808b6:	e021      	b.n	808fc <dispRES+0x80>
        
        while (result)
        {                
                numbers[pos] = INT_TO_ASCII(result % 10);
                result /= (10);
                pos++;
   808b8:	460c      	mov	r4, r1
        // to fill an array
        int32_t numbers[nbr_elem];
        
        while (result)
        {                
                numbers[pos] = INT_TO_ASCII(result % 10);
   808ba:	fb80 3105 	smull	r3, r1, r0, r5
   808be:	17eb      	asrs	r3, r5, #31
   808c0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   808c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   808c8:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
   808cc:	3530      	adds	r5, #48	; 0x30
   808ce:	f842 5f04 	str.w	r5, [r2, #4]!
                result /= (10);
   808d2:	461d      	mov	r5, r3
                pos++;
   808d4:	1c61      	adds	r1, r4, #1
        }
        
        // to fill an array
        int32_t numbers[nbr_elem];
        
        while (result)
   808d6:	2b00      	cmp	r3, #0
   808d8:	d1ee      	bne.n	808b8 <dispRES+0x3c>
                pos++;
        }


        //to write numbers and to loop them 
        for(int i = pos-1; i>=0; i--)
   808da:	2c00      	cmp	r4, #0
   808dc:	db1a      	blt.n	80914 <dispRES+0x98>
   808de:	eb06 0581 	add.w	r5, r6, r1, lsl #2
        {                
                lcd_write(numbers[i], HIGH);
   808e2:	f04f 0801 	mov.w	r8, #1
   808e6:	4e0d      	ldr	r6, [pc, #52]	; (8091c <dispRES+0xa0>)
   808e8:	f855 0d04 	ldr.w	r0, [r5, #-4]!
   808ec:	b2c0      	uxtb	r0, r0
   808ee:	4641      	mov	r1, r8
   808f0:	47b0      	blx	r6
                pos++;
        }


        //to write numbers and to loop them 
        for(int i = pos-1; i>=0; i--)
   808f2:	3c01      	subs	r4, #1
   808f4:	f1b4 3fff 	cmp.w	r4, #4294967295
   808f8:	d1f6      	bne.n	808e8 <dispRES+0x6c>
   808fa:	e00b      	b.n	80914 <dispRES+0x98>
                nbr_elem_copy /= 10;
                nbr_elem++;
        }
        
        // to fill an array
        int32_t numbers[nbr_elem];
   808fc:	0089      	lsls	r1, r1, #2
   808fe:	310a      	adds	r1, #10
   80900:	f021 0107 	bic.w	r1, r1, #7
   80904:	ebad 0d01 	sub.w	sp, sp, r1
   80908:	466e      	mov	r6, sp
   8090a:	f1ad 0204 	sub.w	r2, sp, #4


// function to display the result on the LCD
int  dispRES(int32_t result)
{
        int pos = 0, nbr_elem = 0;
   8090e:	2400      	movs	r4, #0
        // to fill an array
        int32_t numbers[nbr_elem];
        
        while (result)
        {                
                numbers[pos] = INT_TO_ASCII(result % 10);
   80910:	4803      	ldr	r0, [pc, #12]	; (80920 <dispRES+0xa4>)
   80912:	e7d2      	b.n	808ba <dispRES+0x3e>
                lcd_write(numbers[i], HIGH);
        }
        
        all_ok = 1;
        return all_ok;
}
   80914:	2001      	movs	r0, #1
   80916:	46bd      	mov	sp, r7
   80918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8091c:	000806a9 	.word	0x000806a9
   80920:	66666667 	.word	0x66666667

00080924 <LCDwriteString>:


/* displays strings on the LCD display */
int LCDwriteString(const char* str)
{
   80924:	b570      	push	{r4, r5, r6, lr}
   80926:	4604      	mov	r4, r0
        int all_ok = 0;
        
        // loop until break
        while (*str != '\0')
   80928:	7800      	ldrb	r0, [r0, #0]
   8092a:	b138      	cbz	r0, 8093c <LCDwriteString+0x18>
        {
                lcd_write(*str, HIGH);
   8092c:	2601      	movs	r6, #1
   8092e:	4d04      	ldr	r5, [pc, #16]	; (80940 <LCDwriteString+0x1c>)
   80930:	4631      	mov	r1, r6
   80932:	47a8      	blx	r5
int LCDwriteString(const char* str)
{
        int all_ok = 0;
        
        // loop until break
        while (*str != '\0')
   80934:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   80938:	2800      	cmp	r0, #0
   8093a:	d1f9      	bne.n	80930 <LCDwriteString+0xc>
                str++;
        }        
        
        all_ok = 1;
        return all_ok;
}
   8093c:	2001      	movs	r0, #1
   8093e:	bd70      	pop	{r4, r5, r6, pc}
   80940:	000806a9 	.word	0x000806a9

00080944 <main>:
volatile uint32_t delay_time = 0; 
volatile int strength = 0;


int main (void)
{
   80944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// initiate the Due
	sysclk_init();
   80948:	4b1f      	ldr	r3, [pc, #124]	; (809c8 <main+0x84>)
   8094a:	4798      	blx	r3
	board_init();
   8094c:	4b1f      	ldr	r3, [pc, #124]	; (809cc <main+0x88>)
   8094e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80950:	200b      	movs	r0, #11
   80952:	4c1f      	ldr	r4, [pc, #124]	; (809d0 <main+0x8c>)
   80954:	47a0      	blx	r4
   80956:	200c      	movs	r0, #12
   80958:	47a0      	blx	r4
   8095a:	200d      	movs	r0, #13
   8095c:	47a0      	blx	r4
   8095e:	200e      	movs	r0, #14
   80960:	47a0      	blx	r4
	// initiate the I/O-port
	ioport_init();
	// Initiate the delays & LCD
	delay_init();
   80962:	4b1c      	ldr	r3, [pc, #112]	; (809d4 <main+0x90>)
   80964:	4798      	blx	r3
	LCDInit();
   80966:	4b1c      	ldr	r3, [pc, #112]	; (809d8 <main+0x94>)
   80968:	4798      	blx	r3

	// init adc */
	adc_setup();
   8096a:	4b1c      	ldr	r3, [pc, #112]	; (809dc <main+0x98>)
   8096c:	4798      	blx	r3
	dac_setup();
   8096e:	4b1c      	ldr	r3, [pc, #112]	; (809e0 <main+0x9c>)
   80970:	4798      	blx	r3
	// initialize interrupt timer for buttons & audio
	configure_tc_buttons();
   80972:	4b1c      	ldr	r3, [pc, #112]	; (809e4 <main+0xa0>)
   80974:	4798      	blx	r3
	configure_tc_audio();
   80976:	4b1c      	ldr	r3, [pc, #112]	; (809e8 <main+0xa4>)
   80978:	4798      	blx	r3
	
	// just so you know :)
	LCDwriteString("Matko & Ali :)");
   8097a:	481c      	ldr	r0, [pc, #112]	; (809ec <main+0xa8>)
   8097c:	4b1c      	ldr	r3, [pc, #112]	; (809f0 <main+0xac>)
   8097e:	4798      	blx	r3
	delay(7500);
   80980:	f641 504c 	movw	r0, #7500	; 0x1d4c
   80984:	4b1b      	ldr	r3, [pc, #108]	; (809f4 <main+0xb0>)
   80986:	4798      	blx	r3

	while (1)
	{
delay (250000);// much needed delay so the strings get cleared. Aesthetically pleasing
   80988:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80a1c <main+0xd8>
   8098c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 809f4 <main+0xb0>
LCD_Clear_Display();
   80990:	4f19      	ldr	r7, [pc, #100]	; (809f8 <main+0xb4>)
	LCDwriteString("Matko & Ali :)");
	delay(7500);

	while (1)
	{
delay (250000);// much needed delay so the strings get cleared. Aesthetically pleasing
   80992:	4648      	mov	r0, r9
   80994:	47c0      	blx	r8
LCD_Clear_Display();
   80996:	47b8      	blx	r7
	// text that doesn't change plus the updated values	
	lcd_put_cursor(1,0);
   80998:	2001      	movs	r0, #1
   8099a:	2100      	movs	r1, #0
   8099c:	4e17      	ldr	r6, [pc, #92]	; (809fc <main+0xb8>)
   8099e:	47b0      	blx	r6
	LCDwriteString("Delay : ");
   809a0:	4817      	ldr	r0, [pc, #92]	; (80a00 <main+0xbc>)
   809a2:	4c13      	ldr	r4, [pc, #76]	; (809f0 <main+0xac>)
   809a4:	47a0      	blx	r4
	dispRES(delay_time);
   809a6:	4b17      	ldr	r3, [pc, #92]	; (80a04 <main+0xc0>)
   809a8:	6818      	ldr	r0, [r3, #0]
   809aa:	4d17      	ldr	r5, [pc, #92]	; (80a08 <main+0xc4>)
   809ac:	47a8      	blx	r5
	LCDwriteString("ms");
   809ae:	4817      	ldr	r0, [pc, #92]	; (80a0c <main+0xc8>)
   809b0:	47a0      	blx	r4
	lcd_put_cursor(0,0);
   809b2:	2000      	movs	r0, #0
   809b4:	4601      	mov	r1, r0
   809b6:	47b0      	blx	r6
	LCDwriteString("Strength: ");
   809b8:	4815      	ldr	r0, [pc, #84]	; (80a10 <main+0xcc>)
   809ba:	47a0      	blx	r4
	dispRES(strength);
   809bc:	4b15      	ldr	r3, [pc, #84]	; (80a14 <main+0xd0>)
   809be:	6818      	ldr	r0, [r3, #0]
   809c0:	47a8      	blx	r5
	LCDwriteString("%");
   809c2:	4815      	ldr	r0, [pc, #84]	; (80a18 <main+0xd4>)
   809c4:	47a0      	blx	r4
   809c6:	e7e4      	b.n	80992 <main+0x4e>
   809c8:	00080a21 	.word	0x00080a21
   809cc:	00080a81 	.word	0x00080a81
   809d0:	00080e9d 	.word	0x00080e9d
   809d4:	00080559 	.word	0x00080559
   809d8:	00080749 	.word	0x00080749
   809dc:	000801a5 	.word	0x000801a5
   809e0:	00080215 	.word	0x00080215
   809e4:	000804fd 	.word	0x000804fd
   809e8:	000804a1 	.word	0x000804a1
   809ec:	0008128c 	.word	0x0008128c
   809f0:	00080925 	.word	0x00080925
   809f4:	00080599 	.word	0x00080599
   809f8:	0008082d 	.word	0x0008082d
   809fc:	00080859 	.word	0x00080859
   80a00:	0008129c 	.word	0x0008129c
   80a04:	2007527c 	.word	0x2007527c
   80a08:	0008087d 	.word	0x0008087d
   80a0c:	000812a8 	.word	0x000812a8
   80a10:	000812ac 	.word	0x000812ac
   80a14:	20075278 	.word	0x20075278
   80a18:	000812b8 	.word	0x000812b8
   80a1c:	0003d090 	.word	0x0003d090

00080a20 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80a20:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80a22:	480d      	ldr	r0, [pc, #52]	; (80a58 <sysclk_init+0x38>)
   80a24:	4b0d      	ldr	r3, [pc, #52]	; (80a5c <sysclk_init+0x3c>)
   80a26:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80a28:	2000      	movs	r0, #0
   80a2a:	213e      	movs	r1, #62	; 0x3e
   80a2c:	4b0c      	ldr	r3, [pc, #48]	; (80a60 <sysclk_init+0x40>)
   80a2e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80a30:	4c0c      	ldr	r4, [pc, #48]	; (80a64 <sysclk_init+0x44>)
   80a32:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80a34:	2800      	cmp	r0, #0
   80a36:	d0fc      	beq.n	80a32 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80a38:	4b0b      	ldr	r3, [pc, #44]	; (80a68 <sysclk_init+0x48>)
   80a3a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80a3c:	4a0b      	ldr	r2, [pc, #44]	; (80a6c <sysclk_init+0x4c>)
   80a3e:	4b0c      	ldr	r3, [pc, #48]	; (80a70 <sysclk_init+0x50>)
   80a40:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80a42:	4c0c      	ldr	r4, [pc, #48]	; (80a74 <sysclk_init+0x54>)
   80a44:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80a46:	2800      	cmp	r0, #0
   80a48:	d0fc      	beq.n	80a44 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80a4a:	2010      	movs	r0, #16
   80a4c:	4b0a      	ldr	r3, [pc, #40]	; (80a78 <sysclk_init+0x58>)
   80a4e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80a50:	4b0a      	ldr	r3, [pc, #40]	; (80a7c <sysclk_init+0x5c>)
   80a52:	4798      	blx	r3
   80a54:	bd10      	pop	{r4, pc}
   80a56:	bf00      	nop
   80a58:	0501bd00 	.word	0x0501bd00
   80a5c:	000810c5 	.word	0x000810c5
   80a60:	00080e19 	.word	0x00080e19
   80a64:	00080e6d 	.word	0x00080e6d
   80a68:	00080e7d 	.word	0x00080e7d
   80a6c:	200d3f01 	.word	0x200d3f01
   80a70:	400e0600 	.word	0x400e0600
   80a74:	00080e8d 	.word	0x00080e8d
   80a78:	00080db5 	.word	0x00080db5
   80a7c:	00080fa9 	.word	0x00080fa9

00080a80 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80a80:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80a82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80a86:	4b17      	ldr	r3, [pc, #92]	; (80ae4 <board_init+0x64>)
   80a88:	605a      	str	r2, [r3, #4]
   80a8a:	200b      	movs	r0, #11
   80a8c:	4c16      	ldr	r4, [pc, #88]	; (80ae8 <board_init+0x68>)
   80a8e:	47a0      	blx	r4
   80a90:	200c      	movs	r0, #12
   80a92:	47a0      	blx	r4
   80a94:	200d      	movs	r0, #13
   80a96:	47a0      	blx	r4
   80a98:	200e      	movs	r0, #14
   80a9a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80a9c:	203b      	movs	r0, #59	; 0x3b
   80a9e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80aa2:	4c12      	ldr	r4, [pc, #72]	; (80aec <board_init+0x6c>)
   80aa4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80aa6:	2055      	movs	r0, #85	; 0x55
   80aa8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80aac:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80aae:	2056      	movs	r0, #86	; 0x56
   80ab0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ab4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80ab6:	2068      	movs	r0, #104	; 0x68
   80ab8:	490d      	ldr	r1, [pc, #52]	; (80af0 <board_init+0x70>)
   80aba:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80abc:	205c      	movs	r0, #92	; 0x5c
   80abe:	490d      	ldr	r1, [pc, #52]	; (80af4 <board_init+0x74>)
   80ac0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80ac2:	480d      	ldr	r0, [pc, #52]	; (80af8 <board_init+0x78>)
   80ac4:	f44f 7140 	mov.w	r1, #768	; 0x300
   80ac8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80acc:	4b0b      	ldr	r3, [pc, #44]	; (80afc <board_init+0x7c>)
   80ace:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80ad0:	202b      	movs	r0, #43	; 0x2b
   80ad2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ad6:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80ad8:	202a      	movs	r0, #42	; 0x2a
   80ada:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ade:	47a0      	blx	r4
   80ae0:	bd10      	pop	{r4, pc}
   80ae2:	bf00      	nop
   80ae4:	400e1a50 	.word	0x400e1a50
   80ae8:	00080e9d 	.word	0x00080e9d
   80aec:	00080ba5 	.word	0x00080ba5
   80af0:	28000079 	.word	0x28000079
   80af4:	28000001 	.word	0x28000001
   80af8:	400e0e00 	.word	0x400e0e00
   80afc:	00080c79 	.word	0x00080c79

00080b00 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80b00:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80b02:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80b06:	d016      	beq.n	80b36 <pio_set_peripheral+0x36>
   80b08:	d804      	bhi.n	80b14 <pio_set_peripheral+0x14>
   80b0a:	b1c1      	cbz	r1, 80b3e <pio_set_peripheral+0x3e>
   80b0c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80b10:	d00a      	beq.n	80b28 <pio_set_peripheral+0x28>
   80b12:	e013      	b.n	80b3c <pio_set_peripheral+0x3c>
   80b14:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80b18:	d011      	beq.n	80b3e <pio_set_peripheral+0x3e>
   80b1a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80b1e:	d00e      	beq.n	80b3e <pio_set_peripheral+0x3e>
   80b20:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80b24:	d10a      	bne.n	80b3c <pio_set_peripheral+0x3c>
   80b26:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80b28:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80b2a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80b2c:	400b      	ands	r3, r1
   80b2e:	ea23 0302 	bic.w	r3, r3, r2
   80b32:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80b34:	e002      	b.n	80b3c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80b36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80b38:	4313      	orrs	r3, r2
   80b3a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80b3c:	6042      	str	r2, [r0, #4]
   80b3e:	4770      	bx	lr

00080b40 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b40:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b42:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80b46:	bf14      	ite	ne
   80b48:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b4a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80b4c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80b50:	bf14      	ite	ne
   80b52:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80b54:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80b56:	f012 0f02 	tst.w	r2, #2
   80b5a:	d002      	beq.n	80b62 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80b5c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80b60:	e004      	b.n	80b6c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80b62:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_SCIFSR = ul_mask;
   80b66:	bf18      	it	ne
   80b68:	f8c0 1080 	strne.w	r1, [r0, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80b6c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80b6e:	6001      	str	r1, [r0, #0]
   80b70:	4770      	bx	lr
   80b72:	bf00      	nop

00080b74 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80b74:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b76:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b78:	9c01      	ldr	r4, [sp, #4]
   80b7a:	b10c      	cbz	r4, 80b80 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80b7c:	6641      	str	r1, [r0, #100]	; 0x64
   80b7e:	e000      	b.n	80b82 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b80:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80b82:	b10b      	cbz	r3, 80b88 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80b84:	6501      	str	r1, [r0, #80]	; 0x50
   80b86:	e000      	b.n	80b8a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80b88:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80b8a:	b10a      	cbz	r2, 80b90 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80b8c:	6301      	str	r1, [r0, #48]	; 0x30
   80b8e:	e000      	b.n	80b92 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80b90:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80b92:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80b94:	6001      	str	r1, [r0, #0]
}
   80b96:	f85d 4b04 	ldr.w	r4, [sp], #4
   80b9a:	4770      	bx	lr

00080b9c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80b9c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80b9e:	4770      	bx	lr

00080ba0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80ba0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80ba2:	4770      	bx	lr

00080ba4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80ba4:	b570      	push	{r4, r5, r6, lr}
   80ba6:	b082      	sub	sp, #8
   80ba8:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80baa:	0944      	lsrs	r4, r0, #5
   80bac:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80bb0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80bb4:	0266      	lsls	r6, r4, #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80bb6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80bba:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80bbe:	d030      	beq.n	80c22 <pio_configure_pin+0x7e>
   80bc0:	d806      	bhi.n	80bd0 <pio_configure_pin+0x2c>
   80bc2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80bc6:	d00a      	beq.n	80bde <pio_configure_pin+0x3a>
   80bc8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80bcc:	d018      	beq.n	80c00 <pio_configure_pin+0x5c>
   80bce:	e049      	b.n	80c64 <pio_configure_pin+0xc0>
   80bd0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80bd4:	d030      	beq.n	80c38 <pio_configure_pin+0x94>
   80bd6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80bda:	d02d      	beq.n	80c38 <pio_configure_pin+0x94>
   80bdc:	e042      	b.n	80c64 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80bde:	f000 001f 	and.w	r0, r0, #31
   80be2:	2401      	movs	r4, #1
   80be4:	4084      	lsls	r4, r0
   80be6:	4630      	mov	r0, r6
   80be8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bec:	4622      	mov	r2, r4
   80bee:	4b1f      	ldr	r3, [pc, #124]	; (80c6c <pio_configure_pin+0xc8>)
   80bf0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bf2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80bf6:	bf14      	ite	ne
   80bf8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80bfa:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80bfc:	2001      	movs	r0, #1
   80bfe:	e032      	b.n	80c66 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80c00:	f000 001f 	and.w	r0, r0, #31
   80c04:	2401      	movs	r4, #1
   80c06:	4084      	lsls	r4, r0
   80c08:	4630      	mov	r0, r6
   80c0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80c0e:	4622      	mov	r2, r4
   80c10:	4b16      	ldr	r3, [pc, #88]	; (80c6c <pio_configure_pin+0xc8>)
   80c12:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c14:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80c18:	bf14      	ite	ne
   80c1a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c1c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80c1e:	2001      	movs	r0, #1
   80c20:	e021      	b.n	80c66 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80c22:	f000 011f 	and.w	r1, r0, #31
   80c26:	2401      	movs	r4, #1
   80c28:	4630      	mov	r0, r6
   80c2a:	fa04 f101 	lsl.w	r1, r4, r1
   80c2e:	462a      	mov	r2, r5
   80c30:	4b0f      	ldr	r3, [pc, #60]	; (80c70 <pio_configure_pin+0xcc>)
   80c32:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80c34:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80c36:	e016      	b.n	80c66 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80c38:	f000 011f 	and.w	r1, r0, #31
   80c3c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c3e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80c42:	ea05 0304 	and.w	r3, r5, r4
   80c46:	9300      	str	r3, [sp, #0]
   80c48:	4630      	mov	r0, r6
   80c4a:	fa04 f101 	lsl.w	r1, r4, r1
   80c4e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c52:	bf14      	ite	ne
   80c54:	2200      	movne	r2, #0
   80c56:	2201      	moveq	r2, #1
   80c58:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80c5c:	4d05      	ldr	r5, [pc, #20]	; (80c74 <pio_configure_pin+0xd0>)
   80c5e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80c60:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80c62:	e000      	b.n	80c66 <pio_configure_pin+0xc2>

	default:
		return 0;
   80c64:	2000      	movs	r0, #0
	}

	return 1;
}
   80c66:	b002      	add	sp, #8
   80c68:	bd70      	pop	{r4, r5, r6, pc}
   80c6a:	bf00      	nop
   80c6c:	00080b01 	.word	0x00080b01
   80c70:	00080b41 	.word	0x00080b41
   80c74:	00080b75 	.word	0x00080b75

00080c78 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c7a:	b083      	sub	sp, #12
   80c7c:	4607      	mov	r7, r0
   80c7e:	460e      	mov	r6, r1
   80c80:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80c82:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80c86:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80c8a:	d026      	beq.n	80cda <pio_configure_pin_group+0x62>
   80c8c:	d806      	bhi.n	80c9c <pio_configure_pin_group+0x24>
   80c8e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80c92:	d00a      	beq.n	80caa <pio_configure_pin_group+0x32>
   80c94:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80c98:	d013      	beq.n	80cc2 <pio_configure_pin_group+0x4a>
   80c9a:	e034      	b.n	80d06 <pio_configure_pin_group+0x8e>
   80c9c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80ca0:	d01f      	beq.n	80ce2 <pio_configure_pin_group+0x6a>
   80ca2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80ca6:	d01c      	beq.n	80ce2 <pio_configure_pin_group+0x6a>
   80ca8:	e02d      	b.n	80d06 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80caa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cae:	4632      	mov	r2, r6
   80cb0:	4b16      	ldr	r3, [pc, #88]	; (80d0c <pio_configure_pin_group+0x94>)
   80cb2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cb4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80cb8:	bf14      	ite	ne
   80cba:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cbc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cbe:	2001      	movs	r0, #1
   80cc0:	e022      	b.n	80d08 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80cc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80cc6:	4632      	mov	r2, r6
   80cc8:	4b10      	ldr	r3, [pc, #64]	; (80d0c <pio_configure_pin_group+0x94>)
   80cca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80ccc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80cd0:	bf14      	ite	ne
   80cd2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cd4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cd6:	2001      	movs	r0, #1
   80cd8:	e016      	b.n	80d08 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80cda:	4b0d      	ldr	r3, [pc, #52]	; (80d10 <pio_configure_pin_group+0x98>)
   80cdc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80cde:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80ce0:	e012      	b.n	80d08 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80ce2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80ce6:	f005 0301 	and.w	r3, r5, #1
   80cea:	9300      	str	r3, [sp, #0]
   80cec:	4638      	mov	r0, r7
   80cee:	4631      	mov	r1, r6
   80cf0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80cf4:	bf14      	ite	ne
   80cf6:	2200      	movne	r2, #0
   80cf8:	2201      	moveq	r2, #1
   80cfa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80cfe:	4c05      	ldr	r4, [pc, #20]	; (80d14 <pio_configure_pin_group+0x9c>)
   80d00:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80d02:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80d04:	e000      	b.n	80d08 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80d06:	2000      	movs	r0, #0
	}

	return 1;
}
   80d08:	b003      	add	sp, #12
   80d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d0c:	00080b01 	.word	0x00080b01
   80d10:	00080b41 	.word	0x00080b41
   80d14:	00080b75 	.word	0x00080b75

00080d18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d1a:	4604      	mov	r4, r0
   80d1c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80d1e:	4b0e      	ldr	r3, [pc, #56]	; (80d58 <pio_handler_process+0x40>)
   80d20:	4798      	blx	r3
   80d22:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80d24:	4620      	mov	r0, r4
   80d26:	4b0d      	ldr	r3, [pc, #52]	; (80d5c <pio_handler_process+0x44>)
   80d28:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80d2a:	4005      	ands	r5, r0
   80d2c:	d012      	beq.n	80d54 <pio_handler_process+0x3c>
   80d2e:	4c0c      	ldr	r4, [pc, #48]	; (80d60 <pio_handler_process+0x48>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80d30:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80d34:	42b3      	cmp	r3, r6
   80d36:	d10a      	bne.n	80d4e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80d38:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80d3c:	4229      	tst	r1, r5
   80d3e:	d006      	beq.n	80d4e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80d40:	6823      	ldr	r3, [r4, #0]
   80d42:	4630      	mov	r0, r6
   80d44:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80d46:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80d4a:	ea25 0503 	bic.w	r5, r5, r3
   80d4e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80d50:	2d00      	cmp	r5, #0
   80d52:	d1ed      	bne.n	80d30 <pio_handler_process+0x18>
   80d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d56:	bf00      	nop
   80d58:	00080b9d 	.word	0x00080b9d
   80d5c:	00080ba1 	.word	0x00080ba1
   80d60:	2007528c 	.word	0x2007528c

00080d64 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80d64:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80d66:	4802      	ldr	r0, [pc, #8]	; (80d70 <PIOA_Handler+0xc>)
   80d68:	210b      	movs	r1, #11
   80d6a:	4b02      	ldr	r3, [pc, #8]	; (80d74 <PIOA_Handler+0x10>)
   80d6c:	4798      	blx	r3
   80d6e:	bd08      	pop	{r3, pc}
   80d70:	400e0e00 	.word	0x400e0e00
   80d74:	00080d19 	.word	0x00080d19

00080d78 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80d78:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80d7a:	4802      	ldr	r0, [pc, #8]	; (80d84 <PIOB_Handler+0xc>)
   80d7c:	210c      	movs	r1, #12
   80d7e:	4b02      	ldr	r3, [pc, #8]	; (80d88 <PIOB_Handler+0x10>)
   80d80:	4798      	blx	r3
   80d82:	bd08      	pop	{r3, pc}
   80d84:	400e1000 	.word	0x400e1000
   80d88:	00080d19 	.word	0x00080d19

00080d8c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80d8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80d8e:	4802      	ldr	r0, [pc, #8]	; (80d98 <PIOC_Handler+0xc>)
   80d90:	210d      	movs	r1, #13
   80d92:	4b02      	ldr	r3, [pc, #8]	; (80d9c <PIOC_Handler+0x10>)
   80d94:	4798      	blx	r3
   80d96:	bd08      	pop	{r3, pc}
   80d98:	400e1200 	.word	0x400e1200
   80d9c:	00080d19 	.word	0x00080d19

00080da0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80da0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80da2:	4802      	ldr	r0, [pc, #8]	; (80dac <PIOD_Handler+0xc>)
   80da4:	210e      	movs	r1, #14
   80da6:	4b02      	ldr	r3, [pc, #8]	; (80db0 <PIOD_Handler+0x10>)
   80da8:	4798      	blx	r3
   80daa:	bd08      	pop	{r3, pc}
   80dac:	400e1400 	.word	0x400e1400
   80db0:	00080d19 	.word	0x00080d19

00080db4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80db4:	4b17      	ldr	r3, [pc, #92]	; (80e14 <pmc_switch_mck_to_pllack+0x60>)
   80db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80db8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80dbc:	4310      	orrs	r0, r2
   80dbe:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80dc2:	f013 0f08 	tst.w	r3, #8
   80dc6:	d109      	bne.n	80ddc <pmc_switch_mck_to_pllack+0x28>
   80dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80dcc:	4911      	ldr	r1, [pc, #68]	; (80e14 <pmc_switch_mck_to_pllack+0x60>)
   80dce:	e001      	b.n	80dd4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80dd0:	3b01      	subs	r3, #1
   80dd2:	d019      	beq.n	80e08 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dd4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80dd6:	f012 0f08 	tst.w	r2, #8
   80dda:	d0f9      	beq.n	80dd0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ddc:	4b0d      	ldr	r3, [pc, #52]	; (80e14 <pmc_switch_mck_to_pllack+0x60>)
   80dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80de0:	f022 0203 	bic.w	r2, r2, #3
   80de4:	f042 0202 	orr.w	r2, r2, #2
   80de8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dea:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80dec:	f010 0008 	ands.w	r0, r0, #8
   80df0:	d10c      	bne.n	80e0c <pmc_switch_mck_to_pllack+0x58>
   80df2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80df6:	4907      	ldr	r1, [pc, #28]	; (80e14 <pmc_switch_mck_to_pllack+0x60>)
   80df8:	e001      	b.n	80dfe <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80dfa:	3b01      	subs	r3, #1
   80dfc:	d008      	beq.n	80e10 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80dfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80e00:	f012 0f08 	tst.w	r2, #8
   80e04:	d0f9      	beq.n	80dfa <pmc_switch_mck_to_pllack+0x46>
   80e06:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80e08:	2001      	movs	r0, #1
   80e0a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80e0c:	2000      	movs	r0, #0
   80e0e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80e10:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80e12:	4770      	bx	lr
   80e14:	400e0600 	.word	0x400e0600

00080e18 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80e18:	b138      	cbz	r0, 80e2a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e1a:	4911      	ldr	r1, [pc, #68]	; (80e60 <pmc_switch_mainck_to_xtal+0x48>)
   80e1c:	6a0b      	ldr	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80e1e:	4a11      	ldr	r2, [pc, #68]	; (80e64 <pmc_switch_mainck_to_xtal+0x4c>)
   80e20:	401a      	ands	r2, r3
   80e22:	4b11      	ldr	r3, [pc, #68]	; (80e68 <pmc_switch_mainck_to_xtal+0x50>)
   80e24:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e26:	620b      	str	r3, [r1, #32]
   80e28:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e2a:	4a0d      	ldr	r2, [pc, #52]	; (80e60 <pmc_switch_mainck_to_xtal+0x48>)
   80e2c:	6a13      	ldr	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80e2e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80e32:	f023 0303 	bic.w	r3, r3, #3
   80e36:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80e3a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80e3e:	0209      	lsls	r1, r1, #8
   80e40:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80e42:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80e44:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80e46:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80e48:	f013 0f01 	tst.w	r3, #1
   80e4c:	d0fb      	beq.n	80e46 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80e4e:	4a04      	ldr	r2, [pc, #16]	; (80e60 <pmc_switch_mainck_to_xtal+0x48>)
   80e50:	6a13      	ldr	r3, [r2, #32]
   80e52:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80e5a:	6213      	str	r3, [r2, #32]
   80e5c:	4770      	bx	lr
   80e5e:	bf00      	nop
   80e60:	400e0600 	.word	0x400e0600
   80e64:	fec8fffc 	.word	0xfec8fffc
   80e68:	01370002 	.word	0x01370002

00080e6c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80e6c:	4b02      	ldr	r3, [pc, #8]	; (80e78 <pmc_osc_is_ready_mainck+0xc>)
   80e6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e70:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80e74:	4770      	bx	lr
   80e76:	bf00      	nop
   80e78:	400e0600 	.word	0x400e0600

00080e7c <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80e7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80e80:	4b01      	ldr	r3, [pc, #4]	; (80e88 <pmc_disable_pllack+0xc>)
   80e82:	629a      	str	r2, [r3, #40]	; 0x28
   80e84:	4770      	bx	lr
   80e86:	bf00      	nop
   80e88:	400e0600 	.word	0x400e0600

00080e8c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80e8c:	4b02      	ldr	r3, [pc, #8]	; (80e98 <pmc_is_locked_pllack+0xc>)
   80e8e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e90:	f000 0002 	and.w	r0, r0, #2
   80e94:	4770      	bx	lr
   80e96:	bf00      	nop
   80e98:	400e0600 	.word	0x400e0600

00080e9c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80e9c:	282c      	cmp	r0, #44	; 0x2c
   80e9e:	d820      	bhi.n	80ee2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80ea0:	281f      	cmp	r0, #31
   80ea2:	d80d      	bhi.n	80ec0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80ea4:	4b12      	ldr	r3, [pc, #72]	; (80ef0 <pmc_enable_periph_clk+0x54>)
   80ea6:	699a      	ldr	r2, [r3, #24]
   80ea8:	2301      	movs	r3, #1
   80eaa:	4083      	lsls	r3, r0
   80eac:	401a      	ands	r2, r3
   80eae:	4293      	cmp	r3, r2
   80eb0:	d019      	beq.n	80ee6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80eb2:	2301      	movs	r3, #1
   80eb4:	fa03 f000 	lsl.w	r0, r3, r0
   80eb8:	4b0d      	ldr	r3, [pc, #52]	; (80ef0 <pmc_enable_periph_clk+0x54>)
   80eba:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ebc:	2000      	movs	r0, #0
   80ebe:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ec0:	4b0b      	ldr	r3, [pc, #44]	; (80ef0 <pmc_enable_periph_clk+0x54>)
   80ec2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   80ec6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80ec8:	2301      	movs	r3, #1
   80eca:	4083      	lsls	r3, r0
   80ecc:	401a      	ands	r2, r3
   80ece:	4293      	cmp	r3, r2
   80ed0:	d00b      	beq.n	80eea <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80ed2:	2301      	movs	r3, #1
   80ed4:	fa03 f000 	lsl.w	r0, r3, r0
   80ed8:	4b05      	ldr	r3, [pc, #20]	; (80ef0 <pmc_enable_periph_clk+0x54>)
   80eda:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80ede:	2000      	movs	r0, #0
   80ee0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80ee2:	2001      	movs	r0, #1
   80ee4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80ee6:	2000      	movs	r0, #0
   80ee8:	4770      	bx	lr
   80eea:	2000      	movs	r0, #0
}
   80eec:	4770      	bx	lr
   80eee:	bf00      	nop
   80ef0:	400e0600 	.word	0x400e0600

00080ef4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80ef4:	e7fe      	b.n	80ef4 <Dummy_Handler>
   80ef6:	bf00      	nop

00080ef8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ef8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80efa:	4b1e      	ldr	r3, [pc, #120]	; (80f74 <Reset_Handler+0x7c>)
   80efc:	4a1e      	ldr	r2, [pc, #120]	; (80f78 <Reset_Handler+0x80>)
   80efe:	429a      	cmp	r2, r3
   80f00:	d003      	beq.n	80f0a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80f02:	4b1e      	ldr	r3, [pc, #120]	; (80f7c <Reset_Handler+0x84>)
   80f04:	4a1b      	ldr	r2, [pc, #108]	; (80f74 <Reset_Handler+0x7c>)
   80f06:	429a      	cmp	r2, r3
   80f08:	d304      	bcc.n	80f14 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f0a:	4b1d      	ldr	r3, [pc, #116]	; (80f80 <Reset_Handler+0x88>)
   80f0c:	4a1d      	ldr	r2, [pc, #116]	; (80f84 <Reset_Handler+0x8c>)
   80f0e:	429a      	cmp	r2, r3
   80f10:	d30f      	bcc.n	80f32 <Reset_Handler+0x3a>
   80f12:	e01a      	b.n	80f4a <Reset_Handler+0x52>
   80f14:	4b1c      	ldr	r3, [pc, #112]	; (80f88 <Reset_Handler+0x90>)
   80f16:	4c1d      	ldr	r4, [pc, #116]	; (80f8c <Reset_Handler+0x94>)
   80f18:	1ae4      	subs	r4, r4, r3
   80f1a:	f024 0403 	bic.w	r4, r4, #3
   80f1e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f20:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80f22:	4814      	ldr	r0, [pc, #80]	; (80f74 <Reset_Handler+0x7c>)
   80f24:	4914      	ldr	r1, [pc, #80]	; (80f78 <Reset_Handler+0x80>)
   80f26:	585a      	ldr	r2, [r3, r1]
   80f28:	501a      	str	r2, [r3, r0]
   80f2a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80f2c:	42a3      	cmp	r3, r4
   80f2e:	d1fa      	bne.n	80f26 <Reset_Handler+0x2e>
   80f30:	e7eb      	b.n	80f0a <Reset_Handler+0x12>
   80f32:	4b17      	ldr	r3, [pc, #92]	; (80f90 <Reset_Handler+0x98>)
   80f34:	4917      	ldr	r1, [pc, #92]	; (80f94 <Reset_Handler+0x9c>)
   80f36:	1ac9      	subs	r1, r1, r3
   80f38:	f021 0103 	bic.w	r1, r1, #3
   80f3c:	1d1a      	adds	r2, r3, #4
   80f3e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80f40:	2200      	movs	r2, #0
   80f42:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80f46:	428b      	cmp	r3, r1
   80f48:	d1fb      	bne.n	80f42 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80f4a:	4a13      	ldr	r2, [pc, #76]	; (80f98 <Reset_Handler+0xa0>)
   80f4c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80f54:	4911      	ldr	r1, [pc, #68]	; (80f9c <Reset_Handler+0xa4>)
   80f56:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80f58:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80f5c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80f60:	d203      	bcs.n	80f6a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80f62:	688a      	ldr	r2, [r1, #8]
   80f64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80f68:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80f6a:	4b0d      	ldr	r3, [pc, #52]	; (80fa0 <Reset_Handler+0xa8>)
   80f6c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80f6e:	4b0d      	ldr	r3, [pc, #52]	; (80fa4 <Reset_Handler+0xac>)
   80f70:	4798      	blx	r3
   80f72:	e7fe      	b.n	80f72 <Reset_Handler+0x7a>
   80f74:	20070000 	.word	0x20070000
   80f78:	000812e8 	.word	0x000812e8
   80f7c:	20070438 	.word	0x20070438
   80f80:	200752f0 	.word	0x200752f0
   80f84:	20070438 	.word	0x20070438
   80f88:	20070004 	.word	0x20070004
   80f8c:	2007043b 	.word	0x2007043b
   80f90:	20070434 	.word	0x20070434
   80f94:	200752eb 	.word	0x200752eb
   80f98:	00080000 	.word	0x00080000
   80f9c:	e000ed00 	.word	0xe000ed00
   80fa0:	0008114d 	.word	0x0008114d
   80fa4:	00080945 	.word	0x00080945

00080fa8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80fa8:	4b3e      	ldr	r3, [pc, #248]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   80faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80fac:	f003 0303 	and.w	r3, r3, #3
   80fb0:	2b03      	cmp	r3, #3
   80fb2:	d85f      	bhi.n	81074 <SystemCoreClockUpdate+0xcc>
   80fb4:	e8df f003 	tbb	[pc, r3]
   80fb8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80fbc:	4b3a      	ldr	r3, [pc, #232]	; (810a8 <SystemCoreClockUpdate+0x100>)
   80fbe:	695b      	ldr	r3, [r3, #20]
   80fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80fc4:	bf14      	ite	ne
   80fc6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80fca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80fce:	4b37      	ldr	r3, [pc, #220]	; (810ac <SystemCoreClockUpdate+0x104>)
   80fd0:	601a      	str	r2, [r3, #0]
   80fd2:	e04f      	b.n	81074 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80fd4:	4b33      	ldr	r3, [pc, #204]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   80fd6:	6a1b      	ldr	r3, [r3, #32]
   80fd8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80fdc:	d003      	beq.n	80fe6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80fde:	4a34      	ldr	r2, [pc, #208]	; (810b0 <SystemCoreClockUpdate+0x108>)
   80fe0:	4b32      	ldr	r3, [pc, #200]	; (810ac <SystemCoreClockUpdate+0x104>)
   80fe2:	601a      	str	r2, [r3, #0]
   80fe4:	e046      	b.n	81074 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80fe6:	4a33      	ldr	r2, [pc, #204]	; (810b4 <SystemCoreClockUpdate+0x10c>)
   80fe8:	4b30      	ldr	r3, [pc, #192]	; (810ac <SystemCoreClockUpdate+0x104>)
   80fea:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80fec:	4b2d      	ldr	r3, [pc, #180]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   80fee:	6a1b      	ldr	r3, [r3, #32]
   80ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ff4:	2b10      	cmp	r3, #16
   80ff6:	d002      	beq.n	80ffe <SystemCoreClockUpdate+0x56>
   80ff8:	2b20      	cmp	r3, #32
   80ffa:	d004      	beq.n	81006 <SystemCoreClockUpdate+0x5e>
   80ffc:	e03a      	b.n	81074 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ffe:	4a2e      	ldr	r2, [pc, #184]	; (810b8 <SystemCoreClockUpdate+0x110>)
   81000:	4b2a      	ldr	r3, [pc, #168]	; (810ac <SystemCoreClockUpdate+0x104>)
   81002:	601a      	str	r2, [r3, #0]
				break;
   81004:	e036      	b.n	81074 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81006:	4a2a      	ldr	r2, [pc, #168]	; (810b0 <SystemCoreClockUpdate+0x108>)
   81008:	4b28      	ldr	r3, [pc, #160]	; (810ac <SystemCoreClockUpdate+0x104>)
   8100a:	601a      	str	r2, [r3, #0]
				break;
   8100c:	e032      	b.n	81074 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8100e:	4b25      	ldr	r3, [pc, #148]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81010:	6a1b      	ldr	r3, [r3, #32]
   81012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81016:	d003      	beq.n	81020 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81018:	4a25      	ldr	r2, [pc, #148]	; (810b0 <SystemCoreClockUpdate+0x108>)
   8101a:	4b24      	ldr	r3, [pc, #144]	; (810ac <SystemCoreClockUpdate+0x104>)
   8101c:	601a      	str	r2, [r3, #0]
   8101e:	e012      	b.n	81046 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81020:	4a24      	ldr	r2, [pc, #144]	; (810b4 <SystemCoreClockUpdate+0x10c>)
   81022:	4b22      	ldr	r3, [pc, #136]	; (810ac <SystemCoreClockUpdate+0x104>)
   81024:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81026:	4b1f      	ldr	r3, [pc, #124]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81028:	6a1b      	ldr	r3, [r3, #32]
   8102a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8102e:	2b10      	cmp	r3, #16
   81030:	d002      	beq.n	81038 <SystemCoreClockUpdate+0x90>
   81032:	2b20      	cmp	r3, #32
   81034:	d004      	beq.n	81040 <SystemCoreClockUpdate+0x98>
   81036:	e006      	b.n	81046 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81038:	4a1f      	ldr	r2, [pc, #124]	; (810b8 <SystemCoreClockUpdate+0x110>)
   8103a:	4b1c      	ldr	r3, [pc, #112]	; (810ac <SystemCoreClockUpdate+0x104>)
   8103c:	601a      	str	r2, [r3, #0]
				break;
   8103e:	e002      	b.n	81046 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81040:	4a1b      	ldr	r2, [pc, #108]	; (810b0 <SystemCoreClockUpdate+0x108>)
   81042:	4b1a      	ldr	r3, [pc, #104]	; (810ac <SystemCoreClockUpdate+0x104>)
   81044:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81046:	4b17      	ldr	r3, [pc, #92]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8104a:	f003 0303 	and.w	r3, r3, #3
   8104e:	2b02      	cmp	r3, #2
   81050:	d10d      	bne.n	8106e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81052:	4b14      	ldr	r3, [pc, #80]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81054:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81056:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81058:	4b14      	ldr	r3, [pc, #80]	; (810ac <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8105a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8105e:	681a      	ldr	r2, [r3, #0]
   81060:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81064:	b2c9      	uxtb	r1, r1
   81066:	fbb2 f2f1 	udiv	r2, r2, r1
   8106a:	601a      	str	r2, [r3, #0]
   8106c:	e002      	b.n	81074 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8106e:	4a13      	ldr	r2, [pc, #76]	; (810bc <SystemCoreClockUpdate+0x114>)
   81070:	4b0e      	ldr	r3, [pc, #56]	; (810ac <SystemCoreClockUpdate+0x104>)
   81072:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81074:	4b0b      	ldr	r3, [pc, #44]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81078:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8107c:	2b70      	cmp	r3, #112	; 0x70
   8107e:	d107      	bne.n	81090 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81080:	4b0a      	ldr	r3, [pc, #40]	; (810ac <SystemCoreClockUpdate+0x104>)
   81082:	681a      	ldr	r2, [r3, #0]
   81084:	490e      	ldr	r1, [pc, #56]	; (810c0 <SystemCoreClockUpdate+0x118>)
   81086:	fba1 0202 	umull	r0, r2, r1, r2
   8108a:	0852      	lsrs	r2, r2, #1
   8108c:	601a      	str	r2, [r3, #0]
   8108e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81090:	4b04      	ldr	r3, [pc, #16]	; (810a4 <SystemCoreClockUpdate+0xfc>)
   81092:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81094:	4b05      	ldr	r3, [pc, #20]	; (810ac <SystemCoreClockUpdate+0x104>)
   81096:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8109a:	681a      	ldr	r2, [r3, #0]
   8109c:	40ca      	lsrs	r2, r1
   8109e:	601a      	str	r2, [r3, #0]
   810a0:	4770      	bx	lr
   810a2:	bf00      	nop
   810a4:	400e0600 	.word	0x400e0600
   810a8:	400e1a10 	.word	0x400e1a10
   810ac:	20070000 	.word	0x20070000
   810b0:	00b71b00 	.word	0x00b71b00
   810b4:	003d0900 	.word	0x003d0900
   810b8:	007a1200 	.word	0x007a1200
   810bc:	0e4e1c00 	.word	0x0e4e1c00
   810c0:	aaaaaaab 	.word	0xaaaaaaab

000810c4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   810c4:	4b1b      	ldr	r3, [pc, #108]	; (81134 <system_init_flash+0x70>)
   810c6:	4298      	cmp	r0, r3
   810c8:	d806      	bhi.n	810d8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   810ca:	2300      	movs	r3, #0
   810cc:	4a1a      	ldr	r2, [pc, #104]	; (81138 <system_init_flash+0x74>)
   810ce:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   810d0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   810d4:	6013      	str	r3, [r2, #0]
   810d6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   810d8:	4b18      	ldr	r3, [pc, #96]	; (8113c <system_init_flash+0x78>)
   810da:	4298      	cmp	r0, r3
   810dc:	d807      	bhi.n	810ee <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   810de:	f44f 7380 	mov.w	r3, #256	; 0x100
   810e2:	4a15      	ldr	r2, [pc, #84]	; (81138 <system_init_flash+0x74>)
   810e4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   810e6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   810ea:	6013      	str	r3, [r2, #0]
   810ec:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   810ee:	4b14      	ldr	r3, [pc, #80]	; (81140 <system_init_flash+0x7c>)
   810f0:	4298      	cmp	r0, r3
   810f2:	d807      	bhi.n	81104 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   810f4:	f44f 7300 	mov.w	r3, #512	; 0x200
   810f8:	4a0f      	ldr	r2, [pc, #60]	; (81138 <system_init_flash+0x74>)
   810fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   810fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81100:	6013      	str	r3, [r2, #0]
   81102:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81104:	4b0f      	ldr	r3, [pc, #60]	; (81144 <system_init_flash+0x80>)
   81106:	4298      	cmp	r0, r3
   81108:	d807      	bhi.n	8111a <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8110a:	f44f 7340 	mov.w	r3, #768	; 0x300
   8110e:	4a0a      	ldr	r2, [pc, #40]	; (81138 <system_init_flash+0x74>)
   81110:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81112:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81116:	6013      	str	r3, [r2, #0]
   81118:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   8111a:	4b0b      	ldr	r3, [pc, #44]	; (81148 <system_init_flash+0x84>)
   8111c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8111e:	bf94      	ite	ls
   81120:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   81124:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   81128:	4a03      	ldr	r2, [pc, #12]	; (81138 <system_init_flash+0x74>)
   8112a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8112c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   81130:	6013      	str	r3, [r2, #0]
   81132:	4770      	bx	lr
   81134:	0121eabf 	.word	0x0121eabf
   81138:	400e0a00 	.word	0x400e0a00
   8113c:	02faf07f 	.word	0x02faf07f
   81140:	03d08fff 	.word	0x03d08fff
   81144:	04c4b3ff 	.word	0x04c4b3ff
   81148:	055d4a7f 	.word	0x055d4a7f

0008114c <__libc_init_array>:
   8114c:	b570      	push	{r4, r5, r6, lr}
   8114e:	4b0e      	ldr	r3, [pc, #56]	; (81188 <__libc_init_array+0x3c>)
   81150:	4d0e      	ldr	r5, [pc, #56]	; (8118c <__libc_init_array+0x40>)
   81152:	2400      	movs	r4, #0
   81154:	1aed      	subs	r5, r5, r3
   81156:	10ad      	asrs	r5, r5, #2
   81158:	461e      	mov	r6, r3
   8115a:	42ac      	cmp	r4, r5
   8115c:	d004      	beq.n	81168 <__libc_init_array+0x1c>
   8115e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81162:	4790      	blx	r2
   81164:	3401      	adds	r4, #1
   81166:	e7f8      	b.n	8115a <__libc_init_array+0xe>
   81168:	f000 f8ac 	bl	812c4 <_init>
   8116c:	4d08      	ldr	r5, [pc, #32]	; (81190 <__libc_init_array+0x44>)
   8116e:	4b09      	ldr	r3, [pc, #36]	; (81194 <__libc_init_array+0x48>)
   81170:	2400      	movs	r4, #0
   81172:	1aed      	subs	r5, r5, r3
   81174:	10ad      	asrs	r5, r5, #2
   81176:	461e      	mov	r6, r3
   81178:	42ac      	cmp	r4, r5
   8117a:	d004      	beq.n	81186 <__libc_init_array+0x3a>
   8117c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81180:	4790      	blx	r2
   81182:	3401      	adds	r4, #1
   81184:	e7f8      	b.n	81178 <__libc_init_array+0x2c>
   81186:	bd70      	pop	{r4, r5, r6, pc}
   81188:	000812d0 	.word	0x000812d0
   8118c:	000812d0 	.word	0x000812d0
   81190:	000812d8 	.word	0x000812d8
   81194:	000812d0 	.word	0x000812d0

00081198 <register_fini>:
   81198:	4b02      	ldr	r3, [pc, #8]	; (811a4 <register_fini+0xc>)
   8119a:	b113      	cbz	r3, 811a2 <register_fini+0xa>
   8119c:	4802      	ldr	r0, [pc, #8]	; (811a8 <register_fini+0x10>)
   8119e:	f000 b805 	b.w	811ac <atexit>
   811a2:	4770      	bx	lr
   811a4:	00000000 	.word	0x00000000
   811a8:	000811b9 	.word	0x000811b9

000811ac <atexit>:
   811ac:	4601      	mov	r1, r0
   811ae:	2000      	movs	r0, #0
   811b0:	4602      	mov	r2, r0
   811b2:	4603      	mov	r3, r0
   811b4:	f000 b816 	b.w	811e4 <__register_exitproc>

000811b8 <__libc_fini_array>:
   811b8:	b538      	push	{r3, r4, r5, lr}
   811ba:	4d08      	ldr	r5, [pc, #32]	; (811dc <__libc_fini_array+0x24>)
   811bc:	4c08      	ldr	r4, [pc, #32]	; (811e0 <__libc_fini_array+0x28>)
   811be:	1b64      	subs	r4, r4, r5
   811c0:	10a4      	asrs	r4, r4, #2
   811c2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   811c6:	b124      	cbz	r4, 811d2 <__libc_fini_array+0x1a>
   811c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   811cc:	3c01      	subs	r4, #1
   811ce:	4798      	blx	r3
   811d0:	e7f9      	b.n	811c6 <__libc_fini_array+0xe>
   811d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   811d6:	f000 b87f 	b.w	812d8 <_fini>
   811da:	bf00      	nop
   811dc:	000812e4 	.word	0x000812e4
   811e0:	000812e8 	.word	0x000812e8

000811e4 <__register_exitproc>:
   811e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   811e8:	4698      	mov	r8, r3
   811ea:	4b22      	ldr	r3, [pc, #136]	; (81274 <__register_exitproc+0x90>)
   811ec:	4606      	mov	r6, r0
   811ee:	681c      	ldr	r4, [r3, #0]
   811f0:	460f      	mov	r7, r1
   811f2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   811f6:	4691      	mov	r9, r2
   811f8:	b918      	cbnz	r0, 81202 <__register_exitproc+0x1e>
   811fa:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   811fe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   81202:	6843      	ldr	r3, [r0, #4]
   81204:	2b1f      	cmp	r3, #31
   81206:	dd16      	ble.n	81236 <__register_exitproc+0x52>
   81208:	4b1b      	ldr	r3, [pc, #108]	; (81278 <__register_exitproc+0x94>)
   8120a:	b91b      	cbnz	r3, 81214 <__register_exitproc+0x30>
   8120c:	f04f 30ff 	mov.w	r0, #4294967295
   81210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81214:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81218:	f3af 8000 	nop.w
   8121c:	2800      	cmp	r0, #0
   8121e:	d0f5      	beq.n	8120c <__register_exitproc+0x28>
   81220:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81224:	2500      	movs	r5, #0
   81226:	6045      	str	r5, [r0, #4]
   81228:	6001      	str	r1, [r0, #0]
   8122a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8122e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   81232:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   81236:	6844      	ldr	r4, [r0, #4]
   81238:	b1a6      	cbz	r6, 81264 <__register_exitproc+0x80>
   8123a:	2201      	movs	r2, #1
   8123c:	40a2      	lsls	r2, r4
   8123e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   81242:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   81246:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8124a:	2e02      	cmp	r6, #2
   8124c:	ea41 0102 	orr.w	r1, r1, r2
   81250:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   81254:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   81258:	d104      	bne.n	81264 <__register_exitproc+0x80>
   8125a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8125e:	431a      	orrs	r2, r3
   81260:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   81264:	1c63      	adds	r3, r4, #1
   81266:	3402      	adds	r4, #2
   81268:	6043      	str	r3, [r0, #4]
   8126a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   8126e:	2000      	movs	r0, #0
   81270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81274:	000812bc 	.word	0x000812bc
   81278:	00000000 	.word	0x00000000
   8127c:	0c040800 	.word	0x0c040800
   81280:	0e060a02 	.word	0x0e060a02
   81284:	0d050901 	.word	0x0d050901
   81288:	0f070b03 	.word	0x0f070b03
   8128c:	6b74614d 	.word	0x6b74614d
   81290:	2026206f 	.word	0x2026206f
   81294:	20696c41 	.word	0x20696c41
   81298:	0000293a 	.word	0x0000293a
   8129c:	616c6544 	.word	0x616c6544
   812a0:	203a2079 	.word	0x203a2079
   812a4:	00000000 	.word	0x00000000
   812a8:	0000736d 	.word	0x0000736d
   812ac:	65727453 	.word	0x65727453
   812b0:	6874676e 	.word	0x6874676e
   812b4:	0000203a 	.word	0x0000203a
   812b8:	00000025 	.word	0x00000025

000812bc <_global_impure_ptr>:
   812bc:	20070010 00000043                       ... C...

000812c4 <_init>:
   812c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812c6:	bf00      	nop
   812c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   812ca:	bc08      	pop	{r3}
   812cc:	469e      	mov	lr, r3
   812ce:	4770      	bx	lr

000812d0 <__init_array_start>:
   812d0:	00081199 	.word	0x00081199

000812d4 <__frame_dummy_init_array_entry>:
   812d4:	0008016d                                m...

000812d8 <_fini>:
   812d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812da:	bf00      	nop
   812dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   812de:	bc08      	pop	{r3}
   812e0:	469e      	mov	lr, r3
   812e2:	4770      	bx	lr

000812e4 <__fini_array_start>:
   812e4:	00080145 	.word	0x00080145
